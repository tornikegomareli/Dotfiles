#!/usr/bin/env node
import { au as r, A as a, R as c, aO as d, aE as f, aF as x, aL as b, aM as I } from "./color-Bf2jGwiV.js";
import { stdout as s } from "node:process";
import { parseArgs as w } from "node:util";
function D() {
  const n = r(), t = [];
  for (let e = 0; e < 20; e++)
    t.push(a());
  const o = [
    // Example 1: Command with ANSI color codes
    {
      role: "assistant",
      content: [
        {
          type: "tool_use",
          id: t[0],
          name: c,
          input: { cmd: "npm test" }
        }
      ],
      state: { type: "complete", stopReason: "end_turn" }
    },
    {
      role: "user",
      content: [
        {
          type: "tool_result",
          toolUseID: t[0],
          run: {
            status: "done",
            progress: {
              output: `> tstest@1.0.0 test /Users/owi/Projects/tstest
> jest

\x1B[31mFAIL\x1B[39m src/index.test.ts
  \x1B[90m● \x1B[39mTest suite failed to run

    \x1B[31m[96msrc/index.test.ts\x1B[39m\x1B[90m [0m:\x1B[39m \x1B[93m[13\x1B[39m \x1B[90m[0m:\x1B[39m \x1B[93m[37\x1B[39m \x1B[90m[0m - \x1B[31merror\x1B[39m \x1B[90m[0m \x1B[90m[90m TS2554:\x1B[39m
    \x1B[90mExpected 0-1 arguments, but got 2.\x1B[39m

    \x1B[7m13\x1B[39m \x1B[90m[0m    expect(helloWorld(\x1B[32m'TypeScript'\x1B[39m, 2)).toBe(\x1B[32m'Greetings, TypeScript!'\x1B[39m);
    \x1B[7m\x1B[39m \x1B[90m[0m    \x1B[31m[91m~~~~~~~~~~~~~~~~~~~~~~~~~~~~^\x1B[39m

    \x1B[96msrc/index.test.ts\x1B[39m\x1B[90m [0m::\x1B[39m \x1B[93m[17\x1B[39m \x1B[90m[0m::\x1B[39m \x1B[93m[37\x1B[39m \x1B[90m[0m - \x1B[31merror\x1B[39m \x1B[90m[0m \x1B[90m[90m TS2554:\x1B[39m
    \x1B[90mExpected 0-1 arguments, but got 2.\x1B[39m

    \x1B[7m17\x1B[39m \x1B[90m[0m    expect(helloWorld(\x1B[32m'TypeScript'\x1B[39m, 0)).toBe(\x1B[32m'Hey, TypeScript!'\x1B[39m);
    \x1B[7m\x1B[39m \x1B[90m[0m    \x1B[31m[91m~~~~~~~~~~~~~~~~~~~~~~~~~~~~^\x1B[39m


Test Suites: 1 failed, 1 total
Tests:       0 total
Snapshots:   0 total
Time:        0.364 s, estimated 1 s
Ran all test suites.
\x1B[31m  ELIFECYCLE\x1B[39m  Test failed. See above for more details.`
            },
            result: {
              output: `> tstest@1.0.0 test /Users/owi/Projects/tstest
> jest

FAIL src/index.test.ts
  ● Test suite failed to run

    [96msrc/index.test.ts[0m:[93m13[0m:[93m37[0m - [91merror[0m[90m TS2554: [0mExpected 0-1 arguments, but got 2.

    [7m13[0m     expect(helloWorld('TypeScript', 2)).toBe('Greetings, TypeScript!');
    [7m  [0m [91m                                    ~[0m
    [96msrc/index.test.ts[0m:[93m17[0m:[93m37[0m - [91merror[0m[90m TS2554: [0mExpected 0-1 arguments, but got 2.

    [7m17[0m     expect(helloWorld('TypeScript', 0)).toBe('Hey, TypeScript!');
    [7m  [0m [91m                                    ~[0m

Test Suites: 1 failed, 1 total
Tests:       0 total
Snapshots:   0 total
Time:        0.364 s, estimated 1 s
Ran all test suites.
 ELIFECYCLE  Test failed. See above for more details.
`,
              exitCode: 1
            }
          }
        }
      ]
    },
    // Example 2: Queued command
    {
      role: "assistant",
      content: [
        {
          type: "tool_use",
          id: t[1],
          name: c,
          input: { cmd: "echo hello world" }
        }
      ],
      state: { type: "complete", stopReason: "end_turn" }
    },
    {
      role: "user",
      content: [
        {
          type: "tool_result",
          toolUseID: t[1],
          run: {
            status: "queued"
          }
        }
      ]
    },
    // Example 3: Success case
    {
      role: "assistant",
      content: [
        {
          type: "tool_use",
          id: t[2],
          name: c,
          input: { cmd: "echo hello world" }
        }
      ],
      state: { type: "complete", stopReason: "end_turn" }
    },
    {
      role: "user",
      content: [
        {
          type: "tool_result",
          toolUseID: t[2],
          run: {
            status: "done",
            progress: { output: "hello world" },
            result: { output: "hello world", exitCode: 0 }
          }
        }
      ]
    },
    // Example 4: Rejected by user
    {
      role: "assistant",
      content: [
        {
          type: "tool_use",
          id: t[3],
          name: c,
          input: { cmd: "rm -rf /" }
        }
      ],
      state: { type: "complete", stopReason: "end_turn" }
    },
    {
      role: "user",
      content: [
        {
          type: "tool_result",
          toolUseID: t[3],
          run: {
            status: "rejected-by-user",
            toAllow: []
          }
        }
      ]
    },
    // Example 5: Subdirectory
    {
      role: "assistant",
      content: [
        {
          type: "tool_use",
          id: t[4],
          name: c,
          input: { cmd: "ls -la", cwd: "./src" }
        }
      ],
      state: { type: "complete", stopReason: "end_turn" }
    },
    {
      role: "user",
      content: [
        {
          type: "tool_result",
          toolUseID: t[4],
          run: {
            status: "done",
            progress: {
              output: `total 32
drwxr-xr-x  6 user  staff   192 Apr 22 14:35 .
drwxr-xr-x 12 user  staff   384 Apr 22 14:30 ..
-rw-r--r--  1 user  staff  2546 Apr 22 14:35 main.ts
-rw-r--r--  1 user  staff   982 Apr 22 14:30 common.ts
-rw-r--r--  1 user  staff  4285 Apr 22 14:35 storybook.ts`
            },
            result: {
              output: `total 32
drwxr-xr-x  6 user  staff   192 Apr 22 14:35 .
drwxr-xr-x 12 user  staff   384 Apr 22 14:30 ..
-rw-r--r--  1 user  staff  2546 Apr 22 14:35 main.ts
-rw-r--r--  1 user  staff   982 Apr 22 14:30 common.ts
-rw-r--r--  1 user  staff  4285 Apr 22 14:35 storybook.ts`,
              exitCode: 0
            }
          }
        }
      ]
    },
    // Example 6: Error case
    {
      role: "assistant",
      content: [
        {
          type: "tool_use",
          id: t[5],
          name: c,
          input: { cmd: "some-command --flag" }
        }
      ],
      state: { type: "complete", stopReason: "end_turn" }
    },
    {
      role: "user",
      content: [
        {
          type: "tool_result",
          toolUseID: t[5],
          run: {
            status: "done",
            result: {
              output: "some-command: command not found",
              exitCode: 127
            }
          }
        }
      ]
    },
    // Example 7: Cancelled
    {
      role: "assistant",
      content: [
        {
          type: "tool_use",
          id: t[6],
          name: c,
          input: { cmd: 'echo "hello world && sleep 1"' }
        }
      ],
      state: { type: "complete", stopReason: "end_turn" }
    },
    {
      role: "user",
      content: [
        {
          type: "tool_result",
          toolUseID: t[6],
          run: {
            status: "cancelled"
          }
        }
      ]
    },
    // Example 8: Output with Windows line endings (CRLF)
    {
      role: "assistant",
      content: [
        {
          type: "tool_use",
          id: t[7],
          name: c,
          input: { cmd: 'echo "Windows-style line endings demo"' }
        }
      ],
      state: { type: "complete", stopReason: "end_turn" }
    },
    {
      role: "user",
      content: [
        {
          type: "tool_result",
          toolUseID: t[7],
          run: {
            status: "done",
            result: {
              output: `<HTML><HEAD><meta http-equiv="content-type" content="text/html;charset=utf-8">\r
<TITLE>301 Moved</TITLE></HEAD><BODY>\r
<H1>301 Moved</H1>\r
The document has moved\r
<A HREF="http://www.google.com/">here</A>.\r
</BODY></HTML>\r
`,
              exitCode: 0
            }
          }
        }
      ]
    }
  ];
  return {
    name: "bash",
    thread: {
      id: n,
      created: 0,
      v: 0,
      messages: o
    }
  };
}
function v() {
  const n = r(), t = [];
  for (let e = 0; e < 5; e++)
    t.push(a());
  const o = [
    // Example: list files in current directory
    {
      role: "assistant",
      content: [
        {
          type: "tool_use",
          id: t[0],
          name: "list_directory",
          input: {}
        }
      ],
      state: { type: "complete", stopReason: "end_turn" }
    },
    {
      role: "user",
      content: [
        {
          type: "tool_result",
          toolUseID: t[0],
          run: {
            status: "done",
            result: [
              "dist/",
              "node_modules/",
              "src/",
              ".gitignore",
              "package.json",
              "README.md",
              "tsconfig.json",
              "vite.config.ts"
            ]
          }
        }
      ]
    },
    // Example: List files in src directory
    {
      role: "assistant",
      content: [
        {
          type: "tool_use",
          id: t[1],
          name: "list_directory",
          input: { path: "src" }
        }
      ],
      state: { type: "complete", stopReason: "end_turn" }
    },
    {
      role: "user",
      content: [
        {
          type: "tool_result",
          toolUseID: t[1],
          run: {
            status: "done",
            result: [
              "common.ts",
              "ink-main.ts",
              "line-editor/",
              "main.ts",
              "storybook.ts"
            ]
          }
        }
      ]
    }
  ];
  return {
    name: "list_directory",
    thread: {
      id: n,
      created: 0,
      v: 0,
      messages: o
    }
  };
}
function B() {
  const n = r(), t = [];
  for (let e = 0; e < 5; e++)
    t.push(a());
  const o = [
    // Example: Search for a pattern
    {
      role: "assistant",
      content: [
        {
          type: "tool_use",
          id: t[0],
          name: d,
          input: { pattern: "function createListDirectoryStory" }
        }
      ],
      state: { type: "complete", stopReason: "end_turn" }
    },
    {
      role: "user",
      content: [
        {
          type: "tool_result",
          toolUseID: t[0],
          run: {
            status: "done",
            result: [
              "src/storybook.ts:101:function createListDirectoryStory(): Story {",
              "src/storybook.ts:178:  createListDirectoryStory(),"
            ]
          }
        }
      ]
    },
    // Example: Search for a pattern with path
    {
      role: "assistant",
      content: [
        {
          type: "tool_use",
          id: t[1],
          name: d,
          input: { pattern: "function", path: "src/main.ts" }
        }
      ],
      state: { type: "complete", stopReason: "end_turn" }
    },
    {
      role: "user",
      content: [
        {
          type: "tool_result",
          toolUseID: t[1],
          run: {
            status: "done",
            result: [
              "src/main.ts:114:async function readStdinContent(): Promise<string> {",
              "src/main.ts:158:async function main() {",
              "src/main.ts:644:function printStateMachine<S extends { type: string }, E extends { type: string }>(",
              "src/main.ts:665:function hideCursor(): void {",
              "src/main.ts:668:function showCursor(): void {",
              "src/main.ts:672:function drawProgressIndicator(number: number): void {",
              "src/main.ts:678:function clearProgressIndicator(): void {"
            ]
          }
        }
      ]
    }
  ];
  return {
    name: d,
    thread: {
      id: n,
      created: 0,
      v: 0,
      messages: o
    }
  };
}
function U() {
  const n = r(), t = [];
  for (let e = 0; e < 5; e++)
    t.push(a());
  const o = [
    // Example: Read entire file
    {
      role: "assistant",
      content: [
        {
          type: "tool_use",
          id: t[0],
          name: "read_file",
          input: { path: "src/main.ts" }
        }
      ],
      state: { type: "complete", stopReason: "end_turn" }
    },
    {
      role: "user",
      content: [
        {
          type: "tool_result",
          toolUseID: t[0],
          run: {
            status: "done",
            result: `import { program } from "commander"

export function main() {
  console.log("Hello world")
}

main()
`
          }
        }
      ]
    },
    // Example: Read specific line range
    {
      role: "assistant",
      content: [
        {
          type: "tool_use",
          id: t[1],
          name: "read_file",
          input: { path: "package.json" }
        }
      ],
      state: { type: "complete", stopReason: "end_turn" }
    },
    {
      role: "user",
      content: [
        {
          type: "tool_result",
          toolUseID: t[1],
          run: {
            status: "done",
            result: `
{
    "name": "my-project",
    "version": "1.0.0",
    "description": "A sample project",
    "main": "index.js",
    "scripts": {

        "test": "jest"
    },
    "author": "Your Name",
    "license": "ISC",
    "dependencies": {
        "commander": "^8.0.0",
        "jest": "^27.0.0"
    },
    "devDependencies": {
        "typescript": "^4.0.0"
    },
    "jest": {
        "testEnvironment": "node",
        "transform": {
            "^.+\\.tsx?$": "ts-jest"
        },
        "testRegex": "(/__tests__/.*|(\\.|/)(test|spec))\\.(jsx?|tsx?)$",
        "moduleFileExtensions": ["ts", "tsx", "js", "jsx", "json", "node"]
    }
    "ts-node": {
        "esm": true
    },
    "type": "module"
}
                        `
          }
        }
      ]
    },
    // Example: File not found error
    {
      role: "assistant",
      content: [
        {
          type: "tool_use",
          id: t[2],
          name: "read_file",
          input: { path: "non-existent-file.txt" }
        }
      ],
      state: { type: "complete", stopReason: "end_turn" }
    },
    {
      role: "user",
      content: [
        {
          type: "tool_result",
          toolUseID: t[2],
          run: {
            status: "error",
            error: { message: "File not found: non-existent-file.txt" }
          }
        }
      ]
    }
  ];
  return {
    name: "read_file",
    thread: {
      id: n,
      created: 0,
      v: 0,
      messages: o
    }
  };
}
function k() {
  const n = r(), t = [];
  for (let e = 0; e < 6; e++)
    t.push(a());
  const o = [
    // Example: Successful edit
    {
      role: "assistant",
      content: [
        {
          type: "tool_use",
          id: t[0],
          name: "edit_file",
          input: {
            path: "src/components/button.tsx",
            old_str: "const Button = ({ text, onClick }) => {",
            new_str: "const Button = ({ text, onClick, disabled }) => {"
          }
        }
      ],
      state: { type: "complete", stopReason: "end_turn" }
    },
    {
      role: "user",
      content: [
        {
          type: "tool_result",
          toolUseID: t[0],
          run: {
            status: "done",
            result: `\`\`\`diff
Index: src/components/button.tsx
===================================================================
--- src/components/button.tsx  original
+++ src/components/button.tsx  modified
@@ -1,5 +1,5 @@
-const Button = ({ text, onClick }) => {
+const Button = ({ text, onClick, disabled }) => {
   return (
     <button onClick={onClick} className="btn">
       {text}
\`\`\``
          }
        }
      ]
    },
    // Example: Multiple changes
    {
      role: "assistant",
      content: [
        {
          type: "tool_use",
          id: t[1],
          name: "edit_file",
          input: {
            path: "src/components/button.tsx",
            old_str: '<button onClick={onClick} className="btn">',
            new_str: '<button onClick={onClick} className="btn" disabled={disabled}>'
          }
        }
      ],
      state: { type: "complete", stopReason: "end_turn" }
    },
    {
      role: "user",
      content: [
        {
          type: "tool_result",
          toolUseID: t[1],
          run: {
            status: "done",
            result: `\`\`\`diff
Index: src/components/button.tsx
===================================================================
--- src/components/button.tsx  original
+++ src/components/button.tsx  modified
@@ -1,7 +1,7 @@
 const Button = ({ text, onClick, disabled }) => {
   return (
-    <button onClick={onClick} className="btn">
+    <button onClick={onClick} className="btn" disabled={disabled}>
       {text}
     </button>
   );
\`\`\``
          }
        }
      ]
    },
    // Example: Error case
    {
      role: "assistant",
      content: [
        {
          type: "tool_use",
          id: t[2],
          name: "edit_file",
          input: {
            path: "src/components/button.tsx",
            old_str: "text that does not exist",
            new_str: "replacement text"
          }
        }
      ],
      state: { type: "complete", stopReason: "end_turn" }
    },
    {
      role: "user",
      content: [
        {
          type: "tool_result",
          toolUseID: t[2],
          run: {
            status: "error",
            error: {
              message: 'Could not find text "text that does not exist" in file "src/components/button.tsx"'
            }
          }
        }
      ]
    },
    // Example: Edit with diagnostics
    {
      role: "assistant",
      content: [
        {
          type: "tool_use",
          id: t[3],
          name: "edit_file",
          input: {
            path: "src/components/form.tsx",
            old_str: `function Form() {
  return (
    <form>
      <input type="text" />
    </form>
  );
}`,
            new_str: `function Form() {
  const handleSubmit = (e) => {
    e.preventDefault();
  };

  return (
    <form onSubmit={handleSubmit}>
      <input type="text" required />
    </form>
  );
}`
          }
        }
      ],
      state: { type: "complete", stopReason: "end_turn" }
    },
    {
      role: "user",
      content: [
        {
          type: "tool_result",
          toolUseID: t[3],
          run: {
            status: "done",
            result: {
              diff: `\`\`\`diff
Index: src/components/form.tsx
===================================================================
--- src/components/form.tsx  original
+++ src/components/form.tsx  modified
@@ -1,6 +1,10 @@
 function Form() {
+  const handleSubmit = (e) => {
+    e.preventDefault();
+  };
+
   return (
-    <form>
-      <input type="text" />
+    <form onSubmit={handleSubmit}>
+      <input type="text" required />
     </form>
   );
 }
\`\`\``,
              lineRange: [1, 11],
              diagnostics: [
                {
                  path: "src/components/form.tsx",
                  range: {
                    type: "full",
                    start: { line: 2, character: 23 },
                    end: { line: 2, character: 24 }
                  },
                  severity: "error",
                  message: "Parameter 'e' implicitly has an 'any' type.",
                  source: "ts"
                },
                {
                  path: "src/components/form.tsx",
                  range: {
                    type: "full",
                    start: { line: 8, character: 6 },
                    end: { line: 8, character: 31 }
                  },
                  severity: "warning",
                  message: "Form submission is missing validation or feedback for the user",
                  source: "eslint"
                }
              ]
            }
          }
        }
      ]
    }
  ];
  return {
    name: "edit_file",
    thread: {
      id: n,
      created: 0,
      v: 0,
      messages: o
    }
  };
}
function R() {
  const n = r(), t = [];
  for (let e = 0; e < 5; e++)
    t.push(a());
  const o = [
    // Example: Successful file creation
    {
      role: "assistant",
      content: [
        {
          type: "tool_use",
          id: t[0],
          name: "create_file",
          input: {
            path: "src/components/new-component.tsx",
            content: `import React from 'react'

const NewComponent = () => {
  return <div>New Component</div>
}

export default NewComponent`
          }
        }
      ],
      state: { type: "complete", stopReason: "end_turn" }
    },
    {
      role: "user",
      content: [
        {
          type: "tool_result",
          toolUseID: t[0],
          run: {
            status: "done",
            result: void 0
          }
        }
      ]
    },
    // Example: Creating file in nested directory
    {
      role: "assistant",
      content: [
        {
          type: "tool_use",
          id: t[1],
          name: "create_file",
          input: {
            path: "src/utils/helpers/date-utils.ts",
            content: `export const formatDate = (date: Date): string => {
  return date.toISOString().split('T')[0]
}`
          }
        }
      ],
      state: { type: "complete", stopReason: "end_turn" }
    },
    {
      role: "user",
      content: [
        {
          type: "tool_result",
          toolUseID: t[1],
          run: {
            status: "done",
            result: void 0
          }
        }
      ]
    },
    // Example: Error case - directory doesn't exist
    {
      role: "assistant",
      content: [
        {
          type: "tool_use",
          id: t[2],
          name: "create_file",
          input: {
            path: "non-existent-dir/file.ts",
            content: 'console.log("Hello")'
          }
        }
      ],
      state: { type: "complete", stopReason: "end_turn" }
    },
    {
      role: "user",
      content: [
        {
          type: "tool_result",
          toolUseID: t[2],
          run: {
            status: "error",
            error: { message: "Directory does not exist: non-existent-dir" }
          }
        }
      ]
    }
  ];
  return {
    name: "create_file",
    thread: {
      id: n,
      created: 0,
      v: 0,
      messages: o
    }
  };
}
function S() {
  const n = r(), t = [];
  for (let e = 0; e < 3; e++)
    t.push(a());
  const o = [
    // Example: Basic thought process
    {
      role: "assistant",
      content: [
        {
          type: "tool_use",
          id: t[0],
          name: "think",
          input: {
            thoughts: "I need to analyze how this codebase structures its component hierarchy. Let me look at the relationship between parent and child components..."
          }
        }
      ],
      state: { type: "complete", stopReason: "end_turn" }
    },
    {
      role: "user",
      content: [
        {
          type: "tool_result",
          toolUseID: t[0],
          run: {
            status: "done",
            result: ""
          }
        }
      ]
    },
    // Example: Complex reasoning with problem solving
    {
      role: "assistant",
      content: [
        {
          type: "tool_use",
          id: t[1],
          name: "think",
          input: {
            thoughts: `The bug could be caused by one of several issues:

1. Race condition in the async/await flow
2. Improper state management with missing cleanup
3. Event listeners not being properly removed

Let me analyze each possibility:

**Race condition:** The component is making an API call and trying to update state after the component unmounts. I should check for isMounted guards or AbortController usage.

**State management:** If using React context or a state management library, there might be subscription issues that need cleanup.

**Event listeners:** DOM event listeners attached in useEffect might not be properly cleaned up in the return function.

I should check each of these areas in the code.`
          }
        }
      ],
      state: { type: "complete", stopReason: "end_turn" }
    },
    {
      role: "user",
      content: [
        {
          type: "tool_result",
          toolUseID: t[1],
          run: {
            status: "done",
            result: ""
          }
        }
      ]
    }
  ];
  return {
    name: "think",
    thread: {
      id: n,
      created: 0,
      v: 0,
      messages: o
    }
  };
}
function T() {
  const n = r(), t = [];
  for (let e = 0; e < 5; e++)
    t.push(a());
  const o = [
    // Example: Flowchart diagram
    {
      role: "assistant",
      content: [
        {
          type: "tool_use",
          id: t[0],
          name: "mermaid",
          input: {
            code: `graph TD
    A[Start] --> B{Decision}
    B -->|Yes| C[Process]
    B -->|No| D[End]`
          }
        }
      ],
      state: { type: "complete", stopReason: "end_turn" }
    },
    {
      role: "user",
      content: [
        {
          type: "tool_result",
          toolUseID: t[0],
          run: {
            status: "done",
            result: { success: !0 }
          }
        }
      ]
    },
    // Example: Sequence diagram
    {
      role: "assistant",
      content: [
        {
          type: "tool_use",
          id: t[1],
          name: "mermaid",
          input: {
            code: `sequenceDiagram
    participant User
    participant System
    User->>System: Request data
    System-->>User: Return results`
          }
        }
      ],
      state: { type: "complete", stopReason: "end_turn" }
    },
    {
      role: "user",
      content: [
        {
          type: "tool_result",
          toolUseID: t[1],
          run: {
            status: "done",
            result: { success: !0 }
          }
        }
      ]
    },
    // Example: Error case
    {
      role: "assistant",
      content: [
        {
          type: "tool_use",
          id: t[2],
          name: "mermaid",
          input: {
            code: "invalid mermaid syntax"
          }
        }
      ],
      state: { type: "complete", stopReason: "end_turn" }
    },
    {
      role: "user",
      content: [
        {
          type: "tool_result",
          toolUseID: t[2],
          run: {
            status: "error",
            error: { message: "Invalid Mermaid syntax" }
          }
        }
      ]
    }
  ];
  return {
    name: "mermaid",
    thread: {
      id: n,
      created: 0,
      v: 0,
      messages: o
    }
  };
}
function C() {
  const n = r(), t = [];
  for (let e = 0; e < 5; e++)
    t.push(a());
  const o = [
    // Example: Successful search with results
    {
      role: "assistant",
      content: [
        {
          type: "tool_use",
          id: t[0],
          name: "codebase_search_agent",
          input: {
            query: "How does the authentication system validate JWT tokens?"
          }
        }
      ],
      state: { type: "complete", stopReason: "end_turn" }
    },
    {
      role: "user",
      content: [
        {
          type: "tool_result",
          toolUseID: t[0],
          run: {
            status: "done",
            result: `I searched through the codebase and found the JWT validation implementation in these files:

\`\`\`auth/jwt.ts
function validateToken(token: string): User | null {
  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    return userService.findById(decoded.userId);
  } catch (err) {
    logger.error("JWT validation failed", { error: err.message });
    return null;
  }
}
\`\`\`

\`\`\`middleware/auth.ts
export const authMiddleware = async (req, res, next) => {
  const authHeader = req.headers.authorization;
  if (!authHeader || !authHeader.startsWith("Bearer ")) {
    return res.status(401).json({ error: "Invalid authentication header" });
  }
  
  const token = authHeader.split(" ")[1];
  const user = await validateToken(token);
  
  if (!user) {
    return res.status(401).json({ error: "Invalid or expired token" });
  }
  
  req.user = user;
  next();
};
\`\`\``
          }
        }
      ]
    },
    // Example: In progress search
    {
      role: "assistant",
      content: [
        {
          type: "tool_use",
          id: t[1],
          name: "codebase_search_agent",
          input: {
            query: "Where is the error handling logic for the file watcher component?"
          }
        }
      ],
      state: { type: "complete", stopReason: "end_turn" }
    },
    {
      role: "user",
      content: [
        {
          type: "tool_result",
          toolUseID: t[1],
          run: {
            status: "in-progress",
            progress: {
              message: "I found some file watcher related files using `glob`. Now searching for error handling patterns with `ripgrep`..."
            }
          }
        }
      ]
    },
    // Example: No results found
    {
      role: "assistant",
      content: [
        {
          type: "tool_use",
          id: t[2],
          name: "codebase_search_agent",
          input: {
            query: "How are GraphQL subscriptions implemented?"
          }
        }
      ],
      state: { type: "complete", stopReason: "end_turn" }
    },
    {
      role: "user",
      content: [
        {
          type: "tool_result",
          toolUseID: t[2],
          run: {
            status: "done",
            result: "I searched through the codebase but couldn't find any implementation of GraphQL subscriptions. I looked for files containing GraphQL-related terms and specifically for subscription patterns, but there don't appear to be any GraphQL subscriptions implemented in this codebase."
          }
        }
      ]
    },
    // Example: Error case
    {
      role: "assistant",
      content: [
        {
          type: "tool_use",
          id: t[3],
          name: "codebase_search_agent",
          input: {
            query: "How is the database connection pool managed?"
          }
        }
      ],
      state: { type: "complete", stopReason: "end_turn" }
    },
    {
      role: "user",
      content: [
        {
          type: "tool_result",
          toolUseID: t[3],
          run: {
            status: "error",
            error: {
              message: "The search agent encountered an error: timeout after 30 seconds"
            }
          }
        }
      ]
    }
  ];
  return {
    name: "codebase_search_agent",
    thread: {
      id: n,
      created: 0,
      v: 0,
      messages: o
    }
  };
}
function A() {
  const n = r(), t = [];
  for (let e = 0; e < 5; e++)
    t.push(a());
  const o = [
    // Example: File with diagnostic warnings
    {
      role: "assistant",
      content: [
        {
          type: "tool_use",
          id: t[0],
          name: "get_diagnostics",
          input: { path: "src/components/app.tsx" }
        }
      ],
      state: { type: "complete", stopReason: "end_turn" }
    },
    {
      role: "user",
      content: [
        {
          type: "tool_result",
          toolUseID: t[0],
          run: {
            status: "done",
            result: [
              {
                path: "src/components/app.tsx",
                range: {
                  type: "full",
                  start: { line: 44, character: 7 },
                  end: { line: 44, character: 10 }
                },
                severity: "warning",
                message: 'unused variable "foo"',
                source: "ts"
              },
              {
                path: "src/components/app.tsx",
                range: {
                  type: "full",
                  start: { line: 66, character: 9 },
                  end: { line: 66, character: 14 }
                },
                severity: "warning",
                message: 'unused variable "horse"',
                source: "ts"
              },
              {
                path: "src/components/app.tsx",
                range: {
                  type: "full",
                  start: { line: 119, character: 1 },
                  end: { line: 121, character: 18 }
                },
                severity: "hint",
                message: "Consider using const instead of let",
                source: "eslint"
              }
            ]
          }
        }
      ]
    },
    // Example: Directory with multiple files having errors
    {
      role: "assistant",
      content: [
        {
          type: "tool_use",
          id: t[1],
          name: "get_diagnostics",
          input: { path: "src/components" }
        }
      ],
      state: { type: "complete", stopReason: "end_turn" }
    },
    {
      role: "user",
      content: [
        {
          type: "tool_result",
          toolUseID: t[1],
          run: {
            status: "done",
            result: [
              {
                path: "src/components/main.ts",
                range: { type: "legacy", start: { line: 9 } },
                severity: "error",
                message: "invalid syntax",
                source: "ts"
              },
              {
                path: "src/components/widget.tsx",
                range: {
                  type: "full",
                  start: { line: 45, character: 12 },
                  end: { line: 45, character: 22 }
                },
                severity: "error",
                message: "invalid semicolon",
                source: "ts"
              }
            ]
          }
        }
      ]
    },
    // Example: No diagnostics found
    {
      role: "assistant",
      content: [
        {
          type: "tool_use",
          id: t[2],
          name: "get_diagnostics",
          input: { path: "." }
        }
      ],
      state: { type: "complete", stopReason: "end_turn" }
    },
    {
      role: "user",
      content: [
        {
          type: "tool_result",
          toolUseID: t[2],
          run: {
            status: "done",
            result: []
          }
        }
      ]
    },
    // Example: Error case
    {
      role: "assistant",
      content: [
        {
          type: "tool_use",
          id: t[3],
          name: "get_diagnostics",
          input: { path: "src/components/unknown.tsx" }
        }
      ],
      state: { type: "complete", stopReason: "end_turn" }
    },
    {
      role: "user",
      content: [
        {
          type: "tool_result",
          toolUseID: t[3],
          run: {
            status: "error",
            error: { message: "Failed to get diagnostics" }
          }
        }
      ]
    }
  ];
  return {
    name: "get_diagnostics",
    thread: {
      id: n,
      created: 0,
      v: 0,
      messages: o
    }
  };
}
function E() {
  const n = r(), t = [];
  for (let e = 0; e < 5; e++)
    t.push(a());
  const o = [
    // Example: Successful formatting
    {
      role: "assistant",
      content: [
        {
          type: "tool_use",
          id: t[0],
          name: "format_file",
          input: {
            path: "web/src/lib/components/prompt-editor/file-changes-summary.svelte"
          }
        }
      ],
      state: { type: "complete", stopReason: "end_turn" }
    },
    {
      role: "user",
      content: [
        {
          type: "tool_result",
          toolUseID: t[0],
          run: {
            status: "done",
            result: `\`\`\`diff
Index: web/src/lib/components/prompt-editor/file-changes-summary.svelte
===================================================================
--- web/src/lib/components/prompt-editor/file-changes-summary.svelte  original
+++ web/src/lib/components/prompt-editor/file-changes-summary.svelte  modified
@@ -3,13 +3,13 @@

  import { firstValueFrom } from '@sourcegraph/observable'
  import type { Thread } from '@sourcegraph/amp-core/src/threads/thread'
  import type { ThreadWorkerStatus } from '@sourcegraph/amp-core/src/threads/thread-worker'
+ import { onMount } from 'svelte'
  import { getWebviewAPIContext } from '../../../webview-api/context'
  import DiffStat from '../diff-stat.svelte'
  import FilePath from '../thread/structure/file-path.svelte'
  import * as HoverCard from '../ui/hover-card'
- import { onMount } from 'svelte'

  let {
    thread,
    workerStatus,
@@ -17,10 +17,8 @@
  }

  // This will track if the hover card is currently open
  let isHovering = $state(false)
-
`
          }
        }
      ]
    },
    // Example: In progress
    {
      role: "assistant",
      content: [
        {
          type: "tool_use",
          id: t[1],
          name: "format_file",
          input: { path: "src/components/button.tsx" }
        }
      ],
      state: { type: "complete", stopReason: "end_turn" }
    },
    {
      role: "user",
      content: [
        {
          type: "tool_result",
          toolUseID: t[1],
          run: {
            status: "in-progress",
            progress: void 0
          }
        }
      ]
    },
    // Example: Error case
    {
      role: "assistant",
      content: [
        {
          type: "tool_use",
          id: t[2],
          name: "format_file",
          input: { path: "src/components/missing.tsx" }
        }
      ],
      state: { type: "complete", stopReason: "end_turn" }
    },
    {
      role: "user",
      content: [
        {
          type: "tool_result",
          toolUseID: t[2],
          run: {
            status: "error",
            error: { message: "Failed to format file: file not found" }
          }
        }
      ]
    }
  ];
  return {
    name: "format_file",
    thread: {
      id: n,
      created: 0,
      v: 0,
      messages: o
    }
  };
}
function M() {
  const n = r(), t = [];
  for (let e = 0; e < 5; e++)
    t.push(a());
  const o = [
    // Example: Successful undo
    {
      role: "assistant",
      content: [
        {
          type: "tool_use",
          id: t[0],
          name: "undo_edit",
          input: { path: "src/components/button.tsx" }
        }
      ],
      state: { type: "complete", stopReason: "end_turn" }
    },
    {
      role: "user",
      content: [
        {
          type: "tool_result",
          toolUseID: t[0],
          run: {
            status: "done",
            result: `\`\`\`diff
Index: src/components/button.tsx
===================================================================
--- src/components/button.tsx  original
+++ src/components/button.tsx  modified
@@ -1,5 +1,5 @@
-const Button = ({ text, onClick, disabled }) => {
+const Button = ({ text, onClick }) => {
   return (
-    <button onClick={onClick} className="btn" disabled={disabled}>
+    <button onClick={onClick} className="btn">
       {text}
     </button>
   );
\`\`\``
          }
        }
      ]
    },
    // Example: In progress
    {
      role: "assistant",
      content: [
        {
          type: "tool_use",
          id: t[1],
          name: "undo_edit",
          input: { path: "src/components/button.tsx" }
        }
      ],
      state: { type: "complete", stopReason: "end_turn" }
    },
    {
      role: "user",
      content: [
        {
          type: "tool_result",
          toolUseID: t[1],
          run: {
            status: "in-progress",
            progress: void 0
          }
        }
      ]
    },
    // Example: Error case
    {
      role: "assistant",
      content: [
        {
          type: "tool_use",
          id: t[2],
          name: "undo_edit",
          input: { path: "src/components/nonexistent.tsx" }
        }
      ],
      state: { type: "complete", stopReason: "end_turn" }
    },
    {
      role: "user",
      content: [
        {
          type: "tool_result",
          toolUseID: t[2],
          run: {
            status: "error",
            error: { message: "Failed to undo edit: file not found" }
          }
        }
      ]
    }
  ];
  return {
    name: "undo_edit",
    thread: {
      id: n,
      created: 0,
      v: 0,
      messages: o
    }
  };
}
function j() {
  const n = r(), t = [];
  for (let e = 0; e < 5; e++)
    t.push(a());
  const o = [
    // Example: Basic glob search
    {
      role: "assistant",
      content: [
        {
          type: "tool_use",
          id: t[0],
          name: "glob",
          input: { filePattern: "**/*.ts" }
        }
      ],
      state: { type: "complete", stopReason: "end_turn" }
    },
    {
      role: "user",
      content: [
        {
          type: "tool_result",
          toolUseID: t[0],
          run: {
            status: "done",
            result: ["src/app.ts", "src/utils/helpers.ts", "src/components/button.ts"]
          }
        }
      ]
    },
    // Example: Glob search with limit
    {
      role: "assistant",
      content: [
        {
          type: "tool_use",
          id: t[1],
          name: "glob",
          input: { filePattern: "**/*.ts", limit: 5 }
        }
      ],
      state: { type: "complete", stopReason: "end_turn" }
    },
    {
      role: "user",
      content: [
        {
          type: "tool_result",
          toolUseID: t[1],
          run: {
            status: "done",
            result: [
              "src/app.ts",
              "src/utils/helpers.ts",
              "src/components/button.ts",
              "src/models/user.ts",
              "src/config.ts",
              "--- 10 more files not shown ---"
            ]
          }
        }
      ]
    },
    // Example: In-progress glob search
    {
      role: "assistant",
      content: [
        {
          type: "tool_use",
          id: t[2],
          name: "glob",
          input: { filePattern: "**/*.{js,ts}" }
        }
      ],
      state: { type: "complete", stopReason: "end_turn" }
    },
    {
      role: "user",
      content: [
        {
          type: "tool_result",
          toolUseID: t[2],
          run: {
            status: "in-progress",
            progress: ["src/app.ts", "src/utils/helpers.ts"]
          }
        }
      ]
    },
    // Example: No results found
    {
      role: "assistant",
      content: [
        {
          type: "tool_use",
          id: t[3],
          name: "glob",
          input: { filePattern: "**/*test*.ts" }
        }
      ],
      state: { type: "complete", stopReason: "end_turn" }
    },
    {
      role: "user",
      content: [
        {
          type: "tool_result",
          toolUseID: t[3],
          run: {
            status: "done",
            result: []
          }
        }
      ]
    }
  ];
  return {
    name: "glob",
    thread: {
      id: n,
      created: 0,
      v: 0,
      messages: o
    }
  };
}
function L() {
  const n = r(), t = [];
  for (let e = 0; e < 1; e++)
    t.push(a());
  return {
    name: "markdown_rendering",
    thread: {
      id: n,
      created: 0,
      v: 0,
      messages: [
        // Example of various markdown elements
        {
          role: "assistant",
          content: [
            {
              type: "text",
              text: `# Markdown Rendering Test

## Lists with links and bold formatting

- **Bold item** with [link to documentation](https://example.com)
- Regular item with *italic text*
- Item with \`inline code\` and [another link](https://github.com)
  - Nested item 1
  - Nested item 2 with **bold [and link](https://nested-example.com)**

- List item with nested code block:
  \`\`\`javascript
  function example() {
    return "Hello from nested code block";
  }
  \`\`\`

## Tables with columns and rows

| Name | Type | Description |
|------|------|-------------|
| id | string | Unique identifier |
| title | string | Item title |
| completed | boolean | Whether the item is completed |
| priority | number | Item priority (1-5) |

## Code blocks

\`\`\`typescript
interface User {
  id: string;
  name: string;
  email?: string;
  role: 'admin' | 'user';
}

function getUserById(id: string): User | undefined {
  // Implementation
  return users.find(user => user.id === id);
}
\`\`\`

\`\`\`bash
# Install dependencies
npm install

# Run development server
npm run dev
\`\`\`

## Links

Standalone link: https://example.com/standalone

[Named link with title](https://example.com/named "Link Title")

## Checkboxes

- [ ] Uncompleted task
- [x] Completed task
- [ ] Task with **bold text** and [link](https://task-example.com)
- [x] Completed task with \`inline code\`
`
            }
          ],
          state: { type: "complete", stopReason: "end_turn" }
        }
      ]
    }
  };
}
function P() {
  const n = r(), t = [];
  for (let e = 0; e < 5; e++)
    t.push(a());
  const o = [
    // Example: Basic fetch
    {
      role: "assistant",
      content: [
        {
          type: "tool_use",
          id: t[0],
          name: "fetch",
          input: { url: "https://example.com" }
        }
      ],
      state: { type: "complete", stopReason: "end_turn" }
    },
    {
      role: "user",
      content: [
        {
          type: "tool_result",
          toolUseID: t[0],
          run: {
            status: "done",
            result: `<h1>Example Domain</h1>
<p>This domain is for use in illustrative examples in documents. You may use this domain in literature without prior coordination or asking for permission.</p>
<p><a href="https://www.iana.org/domains/example">More information...</a></p>`
          }
        }
      ]
    },
    // Example: Fetch with max_length
    {
      role: "assistant",
      content: [
        {
          type: "tool_use",
          id: t[1],
          name: "fetch",
          input: { url: "https://docs.example.com/api", max_length: 1e3 }
        }
      ],
      state: { type: "complete", stopReason: "end_turn" }
    },
    {
      role: "user",
      content: [
        {
          type: "tool_result",
          toolUseID: t[1],
          run: {
            status: "done",
            result: `# API Documentation

## Introduction
This document describes the REST API endpoints available for the Example service.

## Authentication
All API requests require authentication using an API key. Include the API key in the \`Authorization\` header as follows:

\`\`\`
Authorization: Bearer YOUR_API_KEY
\`\`\`

## Endpoints

### GET /users
Returns a list of users.

#### Query Parameters
- \`limit\` (optional): Maximum number of users to return. Default is 20.
- \`offset\` (optional): Offset for pagination. Default is 0.

#### Response
\`\`\`json
{
  "users": [
    {
      "id": 1,
      "name": "John Doe",
      "email": "john@example.com"
    },
    {
      "id": 2,
      "name": "Jane Smith",
      "email": "jane@example.com"
    }
  ],
  "total": 2
}
\`\`\``
          }
        }
      ]
    },
    // Example: Fetch raw HTML
    {
      role: "assistant",
      content: [
        {
          type: "tool_use",
          id: t[2],
          name: "fetch",
          input: { url: "https://example.com", raw: !0 }
        }
      ],
      state: { type: "complete", stopReason: "end_turn" }
    },
    {
      role: "user",
      content: [
        {
          type: "tool_result",
          toolUseID: t[2],
          run: {
            status: "done",
            result: `<!doctype html>
<html>
<head>
    <title>Example Domain</title>
    <meta charset="utf-8" />
    <meta http-equiv="Content-type" content="text/html; charset=utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
</head>
<body>
<div>
    <h1>Example Domain</h1>
    <p>This domain is for use in illustrative examples in documents. You may use this domain in literature without prior coordination or asking for permission.</p>
    <p><a href="https://www.iana.org/domains/example">More information...</a></p>
</div>
</body>
</html>`
          }
        }
      ]
    },
    // Example: In-progress fetch
    {
      role: "assistant",
      content: [
        {
          type: "tool_use",
          id: t[3],
          name: "fetch",
          input: { url: "https://api.example.com/large-dataset" }
        }
      ],
      state: { type: "complete", stopReason: "end_turn" }
    },
    {
      role: "user",
      content: [
        {
          type: "tool_result",
          toolUseID: t[3],
          run: {
            status: "in-progress",
            progress: void 0
          }
        }
      ]
    },
    // Example: Error case
    {
      role: "assistant",
      content: [
        {
          type: "tool_use",
          id: t[4],
          name: "fetch",
          input: { url: "https://nonexistent-domain-example.com" }
        }
      ],
      state: { type: "complete", stopReason: "end_turn" }
    },
    {
      role: "user",
      content: [
        {
          type: "tool_result",
          toolUseID: t[4],
          run: {
            status: "error",
            error: { message: "Failed to fetch URL: DNS resolution failed" }
          }
        }
      ]
    }
  ];
  return {
    name: "fetch",
    thread: {
      id: n,
      created: 0,
      v: 0,
      messages: o
    }
  };
}
const p = [
  D(),
  v(),
  B(),
  U(),
  k(),
  R(),
  S(),
  T(),
  C(),
  A(),
  E(),
  M(),
  j(),
  P(),
  L()
  // Add more stories here...
];
function h() {
  process.stdout.write("\x1Bc");
}
function y(n, t) {
  const o = t ? f : x;
  s.write(o.print(`# ${n.name}`, { style: "bold", color: "green" }) + `

`);
  const e = b(n.thread, /* @__PURE__ */ new Set(), /* @__PURE__ */ new Set());
  I(e, (i) => s.write(i + `
`), 100, o, 16);
}
function F() {
  const n = {
    color: {
      type: "boolean",
      description: "Enable color output",
      default: !0
    },
    help: { type: "boolean", default: !1, short: "h", description: "Show help" }
  }, { values: t, positionals: o } = w({ options: n, allowPositionals: !0 }), e = t.help, i = t.color ? f : x;
  if (e) {
    h(), s.write(
      `
${i.print("Usage:", { style: "bold" })} ${i.print("pnpm cli:storybook", { color: "green" })} [story-name] [options]

`
    ), s.write(i.print("Options:", { style: "bold" }) + `
`);
    for (const [l, u] of Object.entries(n)) {
      const g = "short" in u && u.short ? `${i.print(`-${u.short}`, { color: "green" })}, ` : "    ", _ = Math.max(1, 20 - l.length);
      s.write(
        `  ${g}${i.print(`--${l}`, { color: "green" })}${" ".repeat(_)}${u.description}
`
      );
    }
    s.write(`
`), s.write(i.print("Available stories:", { style: "bold" }) + `
`);
    for (const l of p)
      s.write(`  ${i.print(l.name, { color: "green" }) + `
`}`);
    s.write(`
`);
    return;
  }
  const m = o[0];
  if (m) {
    const l = p.find((u) => u.name === m);
    if (l)
      h(), y(l, t.color);
    else {
      s.write(i.print(`Story "${m}" not found`, { color: "red" }) + `

`), s.write(i.print("Available stories:", { style: "bold" }) + `
`);
      for (const u of p)
        s.write(`  ${i.print(u.name, { color: "green" })}
`);
      process.exit(1);
    }
  } else {
    h(), s.write(i.print("# Amp CLI Storybook", { style: "bold", color: "cyan" }) + `
`), s.write(`
`);
    for (let l = 0; l < p.length; l++)
      l > 0 && s.write(`
` + "=".repeat(80) + `

`), y(p[l], t.color);
  }
}
F();
//# sourceMappingURL=storybook.js.map
