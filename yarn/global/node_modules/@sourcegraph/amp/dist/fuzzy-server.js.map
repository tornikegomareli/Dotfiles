{"version":3,"file":"fuzzy-server.js","sources":["../../node_modules/.pnpm/fuse.js@7.1.0/node_modules/fuse.js/dist/fuse.mjs","../src/fuzzy-finder/fuzzy-server.ts"],"sourcesContent":["/**\n * Fuse.js v7.1.0 - Lightweight fuzzy-search (http://fusejs.io)\n *\n * Copyright (c) 2025 Kiro Risk (http://kiro.me)\n * All Rights Reserved. Apache Software License 2.0\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n */\n\nfunction isArray(value) {\n  return !Array.isArray\n    ? getTag(value) === '[object Array]'\n    : Array.isArray(value)\n}\n\n// Adapted from: https://github.com/lodash/lodash/blob/master/.internal/baseToString.js\nconst INFINITY = 1 / 0;\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value\n  }\n  let result = value + '';\n  return result == '0' && 1 / value == -INFINITY ? '-0' : result\n}\n\nfunction toString(value) {\n  return value == null ? '' : baseToString(value)\n}\n\nfunction isString(value) {\n  return typeof value === 'string'\n}\n\nfunction isNumber(value) {\n  return typeof value === 'number'\n}\n\n// Adapted from: https://github.com/lodash/lodash/blob/master/isBoolean.js\nfunction isBoolean(value) {\n  return (\n    value === true ||\n    value === false ||\n    (isObjectLike(value) && getTag(value) == '[object Boolean]')\n  )\n}\n\nfunction isObject(value) {\n  return typeof value === 'object'\n}\n\n// Checks if `value` is object-like.\nfunction isObjectLike(value) {\n  return isObject(value) && value !== null\n}\n\nfunction isDefined(value) {\n  return value !== undefined && value !== null\n}\n\nfunction isBlank(value) {\n  return !value.trim().length\n}\n\n// Gets the `toStringTag` of `value`.\n// Adapted from: https://github.com/lodash/lodash/blob/master/.internal/getTag.js\nfunction getTag(value) {\n  return value == null\n    ? value === undefined\n      ? '[object Undefined]'\n      : '[object Null]'\n    : Object.prototype.toString.call(value)\n}\n\nconst EXTENDED_SEARCH_UNAVAILABLE = 'Extended search is not available';\n\nconst INCORRECT_INDEX_TYPE = \"Incorrect 'index' type\";\n\nconst LOGICAL_SEARCH_INVALID_QUERY_FOR_KEY = (key) =>\n  `Invalid value for key ${key}`;\n\nconst PATTERN_LENGTH_TOO_LARGE = (max) =>\n  `Pattern length exceeds max of ${max}.`;\n\nconst MISSING_KEY_PROPERTY = (name) => `Missing ${name} property in key`;\n\nconst INVALID_KEY_WEIGHT_VALUE = (key) =>\n  `Property 'weight' in key '${key}' must be a positive integer`;\n\nconst hasOwn = Object.prototype.hasOwnProperty;\n\nclass KeyStore {\n  constructor(keys) {\n    this._keys = [];\n    this._keyMap = {};\n\n    let totalWeight = 0;\n\n    keys.forEach((key) => {\n      let obj = createKey(key);\n\n      this._keys.push(obj);\n      this._keyMap[obj.id] = obj;\n\n      totalWeight += obj.weight;\n    });\n\n    // Normalize weights so that their sum is equal to 1\n    this._keys.forEach((key) => {\n      key.weight /= totalWeight;\n    });\n  }\n  get(keyId) {\n    return this._keyMap[keyId]\n  }\n  keys() {\n    return this._keys\n  }\n  toJSON() {\n    return JSON.stringify(this._keys)\n  }\n}\n\nfunction createKey(key) {\n  let path = null;\n  let id = null;\n  let src = null;\n  let weight = 1;\n  let getFn = null;\n\n  if (isString(key) || isArray(key)) {\n    src = key;\n    path = createKeyPath(key);\n    id = createKeyId(key);\n  } else {\n    if (!hasOwn.call(key, 'name')) {\n      throw new Error(MISSING_KEY_PROPERTY('name'))\n    }\n\n    const name = key.name;\n    src = name;\n\n    if (hasOwn.call(key, 'weight')) {\n      weight = key.weight;\n\n      if (weight <= 0) {\n        throw new Error(INVALID_KEY_WEIGHT_VALUE(name))\n      }\n    }\n\n    path = createKeyPath(name);\n    id = createKeyId(name);\n    getFn = key.getFn;\n  }\n\n  return { path, id, weight, src, getFn }\n}\n\nfunction createKeyPath(key) {\n  return isArray(key) ? key : key.split('.')\n}\n\nfunction createKeyId(key) {\n  return isArray(key) ? key.join('.') : key\n}\n\nfunction get(obj, path) {\n  let list = [];\n  let arr = false;\n\n  const deepGet = (obj, path, index) => {\n    if (!isDefined(obj)) {\n      return\n    }\n    if (!path[index]) {\n      // If there's no path left, we've arrived at the object we care about.\n      list.push(obj);\n    } else {\n      let key = path[index];\n\n      const value = obj[key];\n\n      if (!isDefined(value)) {\n        return\n      }\n\n      // If we're at the last value in the path, and if it's a string/number/bool,\n      // add it to the list\n      if (\n        index === path.length - 1 &&\n        (isString(value) || isNumber(value) || isBoolean(value))\n      ) {\n        list.push(toString(value));\n      } else if (isArray(value)) {\n        arr = true;\n        // Search each item in the array.\n        for (let i = 0, len = value.length; i < len; i += 1) {\n          deepGet(value[i], path, index + 1);\n        }\n      } else if (path.length) {\n        // An object. Recurse further.\n        deepGet(value, path, index + 1);\n      }\n    }\n  };\n\n  // Backwards compatibility (since path used to be a string)\n  deepGet(obj, isString(path) ? path.split('.') : path, 0);\n\n  return arr ? list : list[0]\n}\n\nconst MatchOptions = {\n  // Whether the matches should be included in the result set. When `true`, each record in the result\n  // set will include the indices of the matched characters.\n  // These can consequently be used for highlighting purposes.\n  includeMatches: false,\n  // When `true`, the matching function will continue to the end of a search pattern even if\n  // a perfect match has already been located in the string.\n  findAllMatches: false,\n  // Minimum number of characters that must be matched before a result is considered a match\n  minMatchCharLength: 1\n};\n\nconst BasicOptions = {\n  // When `true`, the algorithm continues searching to the end of the input even if a perfect\n  // match is found before the end of the same input.\n  isCaseSensitive: false,\n  // When `true`, the algorithm will ignore diacritics (accents) in comparisons\n  ignoreDiacritics: false,\n  // When true, the matching function will continue to the end of a search pattern even if\n  includeScore: false,\n  // List of properties that will be searched. This also supports nested properties.\n  keys: [],\n  // Whether to sort the result list, by score\n  shouldSort: true,\n  // Default sort function: sort by ascending score, ascending index\n  sortFn: (a, b) =>\n    a.score === b.score ? (a.idx < b.idx ? -1 : 1) : a.score < b.score ? -1 : 1\n};\n\nconst FuzzyOptions = {\n  // Approximately where in the text is the pattern expected to be found?\n  location: 0,\n  // At what point does the match algorithm give up. A threshold of '0.0' requires a perfect match\n  // (of both letters and location), a threshold of '1.0' would match anything.\n  threshold: 0.6,\n  // Determines how close the match must be to the fuzzy location (specified above).\n  // An exact letter match which is 'distance' characters away from the fuzzy location\n  // would score as a complete mismatch. A distance of '0' requires the match be at\n  // the exact location specified, a threshold of '1000' would require a perfect match\n  // to be within 800 characters of the fuzzy location to be found using a 0.8 threshold.\n  distance: 100\n};\n\nconst AdvancedOptions = {\n  // When `true`, it enables the use of unix-like search commands\n  useExtendedSearch: false,\n  // The get function to use when fetching an object's properties.\n  // The default will search nested paths *ie foo.bar.baz*\n  getFn: get,\n  // When `true`, search will ignore `location` and `distance`, so it won't matter\n  // where in the string the pattern appears.\n  // More info: https://fusejs.io/concepts/scoring-theory.html#fuzziness-score\n  ignoreLocation: false,\n  // When `true`, the calculation for the relevance score (used for sorting) will\n  // ignore the field-length norm.\n  // More info: https://fusejs.io/concepts/scoring-theory.html#field-length-norm\n  ignoreFieldNorm: false,\n  // The weight to determine how much field length norm effects scoring.\n  fieldNormWeight: 1\n};\n\nvar Config = {\n  ...BasicOptions,\n  ...MatchOptions,\n  ...FuzzyOptions,\n  ...AdvancedOptions\n};\n\nconst SPACE = /[^ ]+/g;\n\n// Field-length norm: the shorter the field, the higher the weight.\n// Set to 3 decimals to reduce index size.\nfunction norm(weight = 1, mantissa = 3) {\n  const cache = new Map();\n  const m = Math.pow(10, mantissa);\n\n  return {\n    get(value) {\n      const numTokens = value.match(SPACE).length;\n\n      if (cache.has(numTokens)) {\n        return cache.get(numTokens)\n      }\n\n      // Default function is 1/sqrt(x), weight makes that variable\n      const norm = 1 / Math.pow(numTokens, 0.5 * weight);\n\n      // In place of `toFixed(mantissa)`, for faster computation\n      const n = parseFloat(Math.round(norm * m) / m);\n\n      cache.set(numTokens, n);\n\n      return n\n    },\n    clear() {\n      cache.clear();\n    }\n  }\n}\n\nclass FuseIndex {\n  constructor({\n    getFn = Config.getFn,\n    fieldNormWeight = Config.fieldNormWeight\n  } = {}) {\n    this.norm = norm(fieldNormWeight, 3);\n    this.getFn = getFn;\n    this.isCreated = false;\n\n    this.setIndexRecords();\n  }\n  setSources(docs = []) {\n    this.docs = docs;\n  }\n  setIndexRecords(records = []) {\n    this.records = records;\n  }\n  setKeys(keys = []) {\n    this.keys = keys;\n    this._keysMap = {};\n    keys.forEach((key, idx) => {\n      this._keysMap[key.id] = idx;\n    });\n  }\n  create() {\n    if (this.isCreated || !this.docs.length) {\n      return\n    }\n\n    this.isCreated = true;\n\n    // List is Array<String>\n    if (isString(this.docs[0])) {\n      this.docs.forEach((doc, docIndex) => {\n        this._addString(doc, docIndex);\n      });\n    } else {\n      // List is Array<Object>\n      this.docs.forEach((doc, docIndex) => {\n        this._addObject(doc, docIndex);\n      });\n    }\n\n    this.norm.clear();\n  }\n  // Adds a doc to the end of the index\n  add(doc) {\n    const idx = this.size();\n\n    if (isString(doc)) {\n      this._addString(doc, idx);\n    } else {\n      this._addObject(doc, idx);\n    }\n  }\n  // Removes the doc at the specified index of the index\n  removeAt(idx) {\n    this.records.splice(idx, 1);\n\n    // Change ref index of every subsquent doc\n    for (let i = idx, len = this.size(); i < len; i += 1) {\n      this.records[i].i -= 1;\n    }\n  }\n  getValueForItemAtKeyId(item, keyId) {\n    return item[this._keysMap[keyId]]\n  }\n  size() {\n    return this.records.length\n  }\n  _addString(doc, docIndex) {\n    if (!isDefined(doc) || isBlank(doc)) {\n      return\n    }\n\n    let record = {\n      v: doc,\n      i: docIndex,\n      n: this.norm.get(doc)\n    };\n\n    this.records.push(record);\n  }\n  _addObject(doc, docIndex) {\n    let record = { i: docIndex, $: {} };\n\n    // Iterate over every key (i.e, path), and fetch the value at that key\n    this.keys.forEach((key, keyIndex) => {\n      let value = key.getFn ? key.getFn(doc) : this.getFn(doc, key.path);\n\n      if (!isDefined(value)) {\n        return\n      }\n\n      if (isArray(value)) {\n        let subRecords = [];\n        const stack = [{ nestedArrIndex: -1, value }];\n\n        while (stack.length) {\n          const { nestedArrIndex, value } = stack.pop();\n\n          if (!isDefined(value)) {\n            continue\n          }\n\n          if (isString(value) && !isBlank(value)) {\n            let subRecord = {\n              v: value,\n              i: nestedArrIndex,\n              n: this.norm.get(value)\n            };\n\n            subRecords.push(subRecord);\n          } else if (isArray(value)) {\n            value.forEach((item, k) => {\n              stack.push({\n                nestedArrIndex: k,\n                value: item\n              });\n            });\n          } else ;\n        }\n        record.$[keyIndex] = subRecords;\n      } else if (isString(value) && !isBlank(value)) {\n        let subRecord = {\n          v: value,\n          n: this.norm.get(value)\n        };\n\n        record.$[keyIndex] = subRecord;\n      }\n    });\n\n    this.records.push(record);\n  }\n  toJSON() {\n    return {\n      keys: this.keys,\n      records: this.records\n    }\n  }\n}\n\nfunction createIndex(\n  keys,\n  docs,\n  { getFn = Config.getFn, fieldNormWeight = Config.fieldNormWeight } = {}\n) {\n  const myIndex = new FuseIndex({ getFn, fieldNormWeight });\n  myIndex.setKeys(keys.map(createKey));\n  myIndex.setSources(docs);\n  myIndex.create();\n  return myIndex\n}\n\nfunction parseIndex(\n  data,\n  { getFn = Config.getFn, fieldNormWeight = Config.fieldNormWeight } = {}\n) {\n  const { keys, records } = data;\n  const myIndex = new FuseIndex({ getFn, fieldNormWeight });\n  myIndex.setKeys(keys);\n  myIndex.setIndexRecords(records);\n  return myIndex\n}\n\nfunction computeScore$1(\n  pattern,\n  {\n    errors = 0,\n    currentLocation = 0,\n    expectedLocation = 0,\n    distance = Config.distance,\n    ignoreLocation = Config.ignoreLocation\n  } = {}\n) {\n  const accuracy = errors / pattern.length;\n\n  if (ignoreLocation) {\n    return accuracy\n  }\n\n  const proximity = Math.abs(expectedLocation - currentLocation);\n\n  if (!distance) {\n    // Dodge divide by zero error.\n    return proximity ? 1.0 : accuracy\n  }\n\n  return accuracy + proximity / distance\n}\n\nfunction convertMaskToIndices(\n  matchmask = [],\n  minMatchCharLength = Config.minMatchCharLength\n) {\n  let indices = [];\n  let start = -1;\n  let end = -1;\n  let i = 0;\n\n  for (let len = matchmask.length; i < len; i += 1) {\n    let match = matchmask[i];\n    if (match && start === -1) {\n      start = i;\n    } else if (!match && start !== -1) {\n      end = i - 1;\n      if (end - start + 1 >= minMatchCharLength) {\n        indices.push([start, end]);\n      }\n      start = -1;\n    }\n  }\n\n  // (i-1 - start) + 1 => i - start\n  if (matchmask[i - 1] && i - start >= minMatchCharLength) {\n    indices.push([start, i - 1]);\n  }\n\n  return indices\n}\n\n// Machine word size\nconst MAX_BITS = 32;\n\nfunction search(\n  text,\n  pattern,\n  patternAlphabet,\n  {\n    location = Config.location,\n    distance = Config.distance,\n    threshold = Config.threshold,\n    findAllMatches = Config.findAllMatches,\n    minMatchCharLength = Config.minMatchCharLength,\n    includeMatches = Config.includeMatches,\n    ignoreLocation = Config.ignoreLocation\n  } = {}\n) {\n  if (pattern.length > MAX_BITS) {\n    throw new Error(PATTERN_LENGTH_TOO_LARGE(MAX_BITS))\n  }\n\n  const patternLen = pattern.length;\n  // Set starting location at beginning text and initialize the alphabet.\n  const textLen = text.length;\n  // Handle the case when location > text.length\n  const expectedLocation = Math.max(0, Math.min(location, textLen));\n  // Highest score beyond which we give up.\n  let currentThreshold = threshold;\n  // Is there a nearby exact match? (speedup)\n  let bestLocation = expectedLocation;\n\n  // Performance: only computer matches when the minMatchCharLength > 1\n  // OR if `includeMatches` is true.\n  const computeMatches = minMatchCharLength > 1 || includeMatches;\n  // A mask of the matches, used for building the indices\n  const matchMask = computeMatches ? Array(textLen) : [];\n\n  let index;\n\n  // Get all exact matches, here for speed up\n  while ((index = text.indexOf(pattern, bestLocation)) > -1) {\n    let score = computeScore$1(pattern, {\n      currentLocation: index,\n      expectedLocation,\n      distance,\n      ignoreLocation\n    });\n\n    currentThreshold = Math.min(score, currentThreshold);\n    bestLocation = index + patternLen;\n\n    if (computeMatches) {\n      let i = 0;\n      while (i < patternLen) {\n        matchMask[index + i] = 1;\n        i += 1;\n      }\n    }\n  }\n\n  // Reset the best location\n  bestLocation = -1;\n\n  let lastBitArr = [];\n  let finalScore = 1;\n  let binMax = patternLen + textLen;\n\n  const mask = 1 << (patternLen - 1);\n\n  for (let i = 0; i < patternLen; i += 1) {\n    // Scan for the best match; each iteration allows for one more error.\n    // Run a binary search to determine how far from the match location we can stray\n    // at this error level.\n    let binMin = 0;\n    let binMid = binMax;\n\n    while (binMin < binMid) {\n      const score = computeScore$1(pattern, {\n        errors: i,\n        currentLocation: expectedLocation + binMid,\n        expectedLocation,\n        distance,\n        ignoreLocation\n      });\n\n      if (score <= currentThreshold) {\n        binMin = binMid;\n      } else {\n        binMax = binMid;\n      }\n\n      binMid = Math.floor((binMax - binMin) / 2 + binMin);\n    }\n\n    // Use the result from this iteration as the maximum for the next.\n    binMax = binMid;\n\n    let start = Math.max(1, expectedLocation - binMid + 1);\n    let finish = findAllMatches\n      ? textLen\n      : Math.min(expectedLocation + binMid, textLen) + patternLen;\n\n    // Initialize the bit array\n    let bitArr = Array(finish + 2);\n\n    bitArr[finish + 1] = (1 << i) - 1;\n\n    for (let j = finish; j >= start; j -= 1) {\n      let currentLocation = j - 1;\n      let charMatch = patternAlphabet[text.charAt(currentLocation)];\n\n      if (computeMatches) {\n        // Speed up: quick bool to int conversion (i.e, `charMatch ? 1 : 0`)\n        matchMask[currentLocation] = +!!charMatch;\n      }\n\n      // First pass: exact match\n      bitArr[j] = ((bitArr[j + 1] << 1) | 1) & charMatch;\n\n      // Subsequent passes: fuzzy match\n      if (i) {\n        bitArr[j] |=\n          ((lastBitArr[j + 1] | lastBitArr[j]) << 1) | 1 | lastBitArr[j + 1];\n      }\n\n      if (bitArr[j] & mask) {\n        finalScore = computeScore$1(pattern, {\n          errors: i,\n          currentLocation,\n          expectedLocation,\n          distance,\n          ignoreLocation\n        });\n\n        // This match will almost certainly be better than any existing match.\n        // But check anyway.\n        if (finalScore <= currentThreshold) {\n          // Indeed it is\n          currentThreshold = finalScore;\n          bestLocation = currentLocation;\n\n          // Already passed `loc`, downhill from here on in.\n          if (bestLocation <= expectedLocation) {\n            break\n          }\n\n          // When passing `bestLocation`, don't exceed our current distance from `expectedLocation`.\n          start = Math.max(1, 2 * expectedLocation - bestLocation);\n        }\n      }\n    }\n\n    // No hope for a (better) match at greater error levels.\n    const score = computeScore$1(pattern, {\n      errors: i + 1,\n      currentLocation: expectedLocation,\n      expectedLocation,\n      distance,\n      ignoreLocation\n    });\n\n    if (score > currentThreshold) {\n      break\n    }\n\n    lastBitArr = bitArr;\n  }\n\n  const result = {\n    isMatch: bestLocation >= 0,\n    // Count exact matches (those with a score of 0) to be \"almost\" exact\n    score: Math.max(0.001, finalScore)\n  };\n\n  if (computeMatches) {\n    const indices = convertMaskToIndices(matchMask, minMatchCharLength);\n    if (!indices.length) {\n      result.isMatch = false;\n    } else if (includeMatches) {\n      result.indices = indices;\n    }\n  }\n\n  return result\n}\n\nfunction createPatternAlphabet(pattern) {\n  let mask = {};\n\n  for (let i = 0, len = pattern.length; i < len; i += 1) {\n    const char = pattern.charAt(i);\n    mask[char] = (mask[char] || 0) | (1 << (len - i - 1));\n  }\n\n  return mask\n}\n\nconst stripDiacritics = String.prototype.normalize\n    ? ((str) => str.normalize('NFD').replace(/[\\u0300-\\u036F\\u0483-\\u0489\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u0610-\\u061A\\u064B-\\u065F\\u0670\\u06D6-\\u06DC\\u06DF-\\u06E4\\u06E7\\u06E8\\u06EA-\\u06ED\\u0711\\u0730-\\u074A\\u07A6-\\u07B0\\u07EB-\\u07F3\\u07FD\\u0816-\\u0819\\u081B-\\u0823\\u0825-\\u0827\\u0829-\\u082D\\u0859-\\u085B\\u08D3-\\u08E1\\u08E3-\\u0903\\u093A-\\u093C\\u093E-\\u094F\\u0951-\\u0957\\u0962\\u0963\\u0981-\\u0983\\u09BC\\u09BE-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CD\\u09D7\\u09E2\\u09E3\\u09FE\\u0A01-\\u0A03\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A70\\u0A71\\u0A75\\u0A81-\\u0A83\\u0ABC\\u0ABE-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AE2\\u0AE3\\u0AFA-\\u0AFF\\u0B01-\\u0B03\\u0B3C\\u0B3E-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B62\\u0B63\\u0B82\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD7\\u0C00-\\u0C04\\u0C3E-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C62\\u0C63\\u0C81-\\u0C83\\u0CBC\\u0CBE-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CE2\\u0CE3\\u0D00-\\u0D03\\u0D3B\\u0D3C\\u0D3E-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4D\\u0D57\\u0D62\\u0D63\\u0D82\\u0D83\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DF2\\u0DF3\\u0E31\\u0E34-\\u0E3A\\u0E47-\\u0E4E\\u0EB1\\u0EB4-\\u0EB9\\u0EBB\\u0EBC\\u0EC8-\\u0ECD\\u0F18\\u0F19\\u0F35\\u0F37\\u0F39\\u0F3E\\u0F3F\\u0F71-\\u0F84\\u0F86\\u0F87\\u0F8D-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u102B-\\u103E\\u1056-\\u1059\\u105E-\\u1060\\u1062-\\u1064\\u1067-\\u106D\\u1071-\\u1074\\u1082-\\u108D\\u108F\\u109A-\\u109D\\u135D-\\u135F\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17B4-\\u17D3\\u17DD\\u180B-\\u180D\\u1885\\u1886\\u18A9\\u1920-\\u192B\\u1930-\\u193B\\u1A17-\\u1A1B\\u1A55-\\u1A5E\\u1A60-\\u1A7C\\u1A7F\\u1AB0-\\u1ABE\\u1B00-\\u1B04\\u1B34-\\u1B44\\u1B6B-\\u1B73\\u1B80-\\u1B82\\u1BA1-\\u1BAD\\u1BE6-\\u1BF3\\u1C24-\\u1C37\\u1CD0-\\u1CD2\\u1CD4-\\u1CE8\\u1CED\\u1CF2-\\u1CF4\\u1CF7-\\u1CF9\\u1DC0-\\u1DF9\\u1DFB-\\u1DFF\\u20D0-\\u20F0\\u2CEF-\\u2CF1\\u2D7F\\u2DE0-\\u2DFF\\u302A-\\u302F\\u3099\\u309A\\uA66F-\\uA672\\uA674-\\uA67D\\uA69E\\uA69F\\uA6F0\\uA6F1\\uA802\\uA806\\uA80B\\uA823-\\uA827\\uA880\\uA881\\uA8B4-\\uA8C5\\uA8E0-\\uA8F1\\uA8FF\\uA926-\\uA92D\\uA947-\\uA953\\uA980-\\uA983\\uA9B3-\\uA9C0\\uA9E5\\uAA29-\\uAA36\\uAA43\\uAA4C\\uAA4D\\uAA7B-\\uAA7D\\uAAB0\\uAAB2-\\uAAB4\\uAAB7\\uAAB8\\uAABE\\uAABF\\uAAC1\\uAAEB-\\uAAEF\\uAAF5\\uAAF6\\uABE3-\\uABEA\\uABEC\\uABED\\uFB1E\\uFE00-\\uFE0F\\uFE20-\\uFE2F]/g, ''))\n    : ((str) => str);\n\nclass BitapSearch {\n  constructor(\n    pattern,\n    {\n      location = Config.location,\n      threshold = Config.threshold,\n      distance = Config.distance,\n      includeMatches = Config.includeMatches,\n      findAllMatches = Config.findAllMatches,\n      minMatchCharLength = Config.minMatchCharLength,\n      isCaseSensitive = Config.isCaseSensitive,\n      ignoreDiacritics = Config.ignoreDiacritics,\n      ignoreLocation = Config.ignoreLocation\n    } = {}\n  ) {\n    this.options = {\n      location,\n      threshold,\n      distance,\n      includeMatches,\n      findAllMatches,\n      minMatchCharLength,\n      isCaseSensitive,\n      ignoreDiacritics,\n      ignoreLocation\n    };\n\n    pattern = isCaseSensitive ? pattern : pattern.toLowerCase();\n    pattern = ignoreDiacritics ? stripDiacritics(pattern) : pattern;\n    this.pattern = pattern;\n\n    this.chunks = [];\n\n    if (!this.pattern.length) {\n      return\n    }\n\n    const addChunk = (pattern, startIndex) => {\n      this.chunks.push({\n        pattern,\n        alphabet: createPatternAlphabet(pattern),\n        startIndex\n      });\n    };\n\n    const len = this.pattern.length;\n\n    if (len > MAX_BITS) {\n      let i = 0;\n      const remainder = len % MAX_BITS;\n      const end = len - remainder;\n\n      while (i < end) {\n        addChunk(this.pattern.substr(i, MAX_BITS), i);\n        i += MAX_BITS;\n      }\n\n      if (remainder) {\n        const startIndex = len - MAX_BITS;\n        addChunk(this.pattern.substr(startIndex), startIndex);\n      }\n    } else {\n      addChunk(this.pattern, 0);\n    }\n  }\n\n  searchIn(text) {\n    const { isCaseSensitive, ignoreDiacritics, includeMatches } = this.options;\n\n    text = isCaseSensitive ? text : text.toLowerCase();\n    text = ignoreDiacritics ? stripDiacritics(text) : text;\n\n    // Exact match\n    if (this.pattern === text) {\n      let result = {\n        isMatch: true,\n        score: 0\n      };\n\n      if (includeMatches) {\n        result.indices = [[0, text.length - 1]];\n      }\n\n      return result\n    }\n\n    // Otherwise, use Bitap algorithm\n    const {\n      location,\n      distance,\n      threshold,\n      findAllMatches,\n      minMatchCharLength,\n      ignoreLocation\n    } = this.options;\n\n    let allIndices = [];\n    let totalScore = 0;\n    let hasMatches = false;\n\n    this.chunks.forEach(({ pattern, alphabet, startIndex }) => {\n      const { isMatch, score, indices } = search(text, pattern, alphabet, {\n        location: location + startIndex,\n        distance,\n        threshold,\n        findAllMatches,\n        minMatchCharLength,\n        includeMatches,\n        ignoreLocation\n      });\n\n      if (isMatch) {\n        hasMatches = true;\n      }\n\n      totalScore += score;\n\n      if (isMatch && indices) {\n        allIndices = [...allIndices, ...indices];\n      }\n    });\n\n    let result = {\n      isMatch: hasMatches,\n      score: hasMatches ? totalScore / this.chunks.length : 1\n    };\n\n    if (hasMatches && includeMatches) {\n      result.indices = allIndices;\n    }\n\n    return result\n  }\n}\n\nclass BaseMatch {\n  constructor(pattern) {\n    this.pattern = pattern;\n  }\n  static isMultiMatch(pattern) {\n    return getMatch(pattern, this.multiRegex)\n  }\n  static isSingleMatch(pattern) {\n    return getMatch(pattern, this.singleRegex)\n  }\n  search(/*text*/) {}\n}\n\nfunction getMatch(pattern, exp) {\n  const matches = pattern.match(exp);\n  return matches ? matches[1] : null\n}\n\n// Token: 'file\n\nclass ExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'exact'\n  }\n  static get multiRegex() {\n    return /^=\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^=(.*)$/\n  }\n  search(text) {\n    const isMatch = text === this.pattern;\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, this.pattern.length - 1]\n    }\n  }\n}\n\n// Token: !fire\n\nclass InverseExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'inverse-exact'\n  }\n  static get multiRegex() {\n    return /^!\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^!(.*)$/\n  }\n  search(text) {\n    const index = text.indexOf(this.pattern);\n    const isMatch = index === -1;\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, text.length - 1]\n    }\n  }\n}\n\n// Token: ^file\n\nclass PrefixExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'prefix-exact'\n  }\n  static get multiRegex() {\n    return /^\\^\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^\\^(.*)$/\n  }\n  search(text) {\n    const isMatch = text.startsWith(this.pattern);\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, this.pattern.length - 1]\n    }\n  }\n}\n\n// Token: !^fire\n\nclass InversePrefixExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'inverse-prefix-exact'\n  }\n  static get multiRegex() {\n    return /^!\\^\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^!\\^(.*)$/\n  }\n  search(text) {\n    const isMatch = !text.startsWith(this.pattern);\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, text.length - 1]\n    }\n  }\n}\n\n// Token: .file$\n\nclass SuffixExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'suffix-exact'\n  }\n  static get multiRegex() {\n    return /^\"(.*)\"\\$$/\n  }\n  static get singleRegex() {\n    return /^(.*)\\$$/\n  }\n  search(text) {\n    const isMatch = text.endsWith(this.pattern);\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [text.length - this.pattern.length, text.length - 1]\n    }\n  }\n}\n\n// Token: !.file$\n\nclass InverseSuffixExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'inverse-suffix-exact'\n  }\n  static get multiRegex() {\n    return /^!\"(.*)\"\\$$/\n  }\n  static get singleRegex() {\n    return /^!(.*)\\$$/\n  }\n  search(text) {\n    const isMatch = !text.endsWith(this.pattern);\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, text.length - 1]\n    }\n  }\n}\n\nclass FuzzyMatch extends BaseMatch {\n  constructor(\n    pattern,\n    {\n      location = Config.location,\n      threshold = Config.threshold,\n      distance = Config.distance,\n      includeMatches = Config.includeMatches,\n      findAllMatches = Config.findAllMatches,\n      minMatchCharLength = Config.minMatchCharLength,\n      isCaseSensitive = Config.isCaseSensitive,\n      ignoreDiacritics = Config.ignoreDiacritics,\n      ignoreLocation = Config.ignoreLocation\n    } = {}\n  ) {\n    super(pattern);\n    this._bitapSearch = new BitapSearch(pattern, {\n      location,\n      threshold,\n      distance,\n      includeMatches,\n      findAllMatches,\n      minMatchCharLength,\n      isCaseSensitive,\n      ignoreDiacritics,\n      ignoreLocation\n    });\n  }\n  static get type() {\n    return 'fuzzy'\n  }\n  static get multiRegex() {\n    return /^\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^(.*)$/\n  }\n  search(text) {\n    return this._bitapSearch.searchIn(text)\n  }\n}\n\n// Token: 'file\n\nclass IncludeMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'include'\n  }\n  static get multiRegex() {\n    return /^'\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^'(.*)$/\n  }\n  search(text) {\n    let location = 0;\n    let index;\n\n    const indices = [];\n    const patternLen = this.pattern.length;\n\n    // Get all exact matches\n    while ((index = text.indexOf(this.pattern, location)) > -1) {\n      location = index + patternLen;\n      indices.push([index, location - 1]);\n    }\n\n    const isMatch = !!indices.length;\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices\n    }\n  }\n}\n\n// ❗Order is important. DO NOT CHANGE.\nconst searchers = [\n  ExactMatch,\n  IncludeMatch,\n  PrefixExactMatch,\n  InversePrefixExactMatch,\n  InverseSuffixExactMatch,\n  SuffixExactMatch,\n  InverseExactMatch,\n  FuzzyMatch\n];\n\nconst searchersLen = searchers.length;\n\n// Regex to split by spaces, but keep anything in quotes together\nconst SPACE_RE = / +(?=(?:[^\\\"]*\\\"[^\\\"]*\\\")*[^\\\"]*$)/;\nconst OR_TOKEN = '|';\n\n// Return a 2D array representation of the query, for simpler parsing.\n// Example:\n// \"^core go$ | rb$ | py$ xy$\" => [[\"^core\", \"go$\"], [\"rb$\"], [\"py$\", \"xy$\"]]\nfunction parseQuery(pattern, options = {}) {\n  return pattern.split(OR_TOKEN).map((item) => {\n    let query = item\n      .trim()\n      .split(SPACE_RE)\n      .filter((item) => item && !!item.trim());\n\n    let results = [];\n    for (let i = 0, len = query.length; i < len; i += 1) {\n      const queryItem = query[i];\n\n      // 1. Handle multiple query match (i.e, once that are quoted, like `\"hello world\"`)\n      let found = false;\n      let idx = -1;\n      while (!found && ++idx < searchersLen) {\n        const searcher = searchers[idx];\n        let token = searcher.isMultiMatch(queryItem);\n        if (token) {\n          results.push(new searcher(token, options));\n          found = true;\n        }\n      }\n\n      if (found) {\n        continue\n      }\n\n      // 2. Handle single query matches (i.e, once that are *not* quoted)\n      idx = -1;\n      while (++idx < searchersLen) {\n        const searcher = searchers[idx];\n        let token = searcher.isSingleMatch(queryItem);\n        if (token) {\n          results.push(new searcher(token, options));\n          break\n        }\n      }\n    }\n\n    return results\n  })\n}\n\n// These extended matchers can return an array of matches, as opposed\n// to a singl match\nconst MultiMatchSet = new Set([FuzzyMatch.type, IncludeMatch.type]);\n\n/**\n * Command-like searching\n * ======================\n *\n * Given multiple search terms delimited by spaces.e.g. `^jscript .python$ ruby !java`,\n * search in a given text.\n *\n * Search syntax:\n *\n * | Token       | Match type                 | Description                            |\n * | ----------- | -------------------------- | -------------------------------------- |\n * | `jscript`   | fuzzy-match                | Items that fuzzy match `jscript`       |\n * | `=scheme`   | exact-match                | Items that are `scheme`                |\n * | `'python`   | include-match              | Items that include `python`            |\n * | `!ruby`     | inverse-exact-match        | Items that do not include `ruby`       |\n * | `^java`     | prefix-exact-match         | Items that start with `java`           |\n * | `!^earlang` | inverse-prefix-exact-match | Items that do not start with `earlang` |\n * | `.js$`      | suffix-exact-match         | Items that end with `.js`              |\n * | `!.go$`     | inverse-suffix-exact-match | Items that do not end with `.go`       |\n *\n * A single pipe character acts as an OR operator. For example, the following\n * query matches entries that start with `core` and end with either`go`, `rb`,\n * or`py`.\n *\n * ```\n * ^core go$ | rb$ | py$\n * ```\n */\nclass ExtendedSearch {\n  constructor(\n    pattern,\n    {\n      isCaseSensitive = Config.isCaseSensitive,\n      ignoreDiacritics = Config.ignoreDiacritics,\n      includeMatches = Config.includeMatches,\n      minMatchCharLength = Config.minMatchCharLength,\n      ignoreLocation = Config.ignoreLocation,\n      findAllMatches = Config.findAllMatches,\n      location = Config.location,\n      threshold = Config.threshold,\n      distance = Config.distance\n    } = {}\n  ) {\n    this.query = null;\n    this.options = {\n      isCaseSensitive,\n      ignoreDiacritics,\n      includeMatches,\n      minMatchCharLength,\n      findAllMatches,\n      ignoreLocation,\n      location,\n      threshold,\n      distance\n    };\n\n    pattern = isCaseSensitive ? pattern : pattern.toLowerCase();\n    pattern = ignoreDiacritics ? stripDiacritics(pattern) : pattern;\n    this.pattern = pattern;\n    this.query = parseQuery(this.pattern, this.options);\n  }\n\n  static condition(_, options) {\n    return options.useExtendedSearch\n  }\n\n  searchIn(text) {\n    const query = this.query;\n\n    if (!query) {\n      return {\n        isMatch: false,\n        score: 1\n      }\n    }\n\n    const { includeMatches, isCaseSensitive, ignoreDiacritics } = this.options;\n\n    text = isCaseSensitive ? text : text.toLowerCase();\n    text = ignoreDiacritics ? stripDiacritics(text) : text;\n\n    let numMatches = 0;\n    let allIndices = [];\n    let totalScore = 0;\n\n    // ORs\n    for (let i = 0, qLen = query.length; i < qLen; i += 1) {\n      const searchers = query[i];\n\n      // Reset indices\n      allIndices.length = 0;\n      numMatches = 0;\n\n      // ANDs\n      for (let j = 0, pLen = searchers.length; j < pLen; j += 1) {\n        const searcher = searchers[j];\n        const { isMatch, indices, score } = searcher.search(text);\n\n        if (isMatch) {\n          numMatches += 1;\n          totalScore += score;\n          if (includeMatches) {\n            const type = searcher.constructor.type;\n            if (MultiMatchSet.has(type)) {\n              allIndices = [...allIndices, ...indices];\n            } else {\n              allIndices.push(indices);\n            }\n          }\n        } else {\n          totalScore = 0;\n          numMatches = 0;\n          allIndices.length = 0;\n          break\n        }\n      }\n\n      // OR condition, so if TRUE, return\n      if (numMatches) {\n        let result = {\n          isMatch: true,\n          score: totalScore / numMatches\n        };\n\n        if (includeMatches) {\n          result.indices = allIndices;\n        }\n\n        return result\n      }\n    }\n\n    // Nothing was matched\n    return {\n      isMatch: false,\n      score: 1\n    }\n  }\n}\n\nconst registeredSearchers = [];\n\nfunction register(...args) {\n  registeredSearchers.push(...args);\n}\n\nfunction createSearcher(pattern, options) {\n  for (let i = 0, len = registeredSearchers.length; i < len; i += 1) {\n    let searcherClass = registeredSearchers[i];\n    if (searcherClass.condition(pattern, options)) {\n      return new searcherClass(pattern, options)\n    }\n  }\n\n  return new BitapSearch(pattern, options)\n}\n\nconst LogicalOperator = {\n  AND: '$and',\n  OR: '$or'\n};\n\nconst KeyType = {\n  PATH: '$path',\n  PATTERN: '$val'\n};\n\nconst isExpression = (query) =>\n  !!(query[LogicalOperator.AND] || query[LogicalOperator.OR]);\n\nconst isPath = (query) => !!query[KeyType.PATH];\n\nconst isLeaf = (query) =>\n  !isArray(query) && isObject(query) && !isExpression(query);\n\nconst convertToExplicit = (query) => ({\n  [LogicalOperator.AND]: Object.keys(query).map((key) => ({\n    [key]: query[key]\n  }))\n});\n\n// When `auto` is `true`, the parse function will infer and initialize and add\n// the appropriate `Searcher` instance\nfunction parse(query, options, { auto = true } = {}) {\n  const next = (query) => {\n    let keys = Object.keys(query);\n\n    const isQueryPath = isPath(query);\n\n    if (!isQueryPath && keys.length > 1 && !isExpression(query)) {\n      return next(convertToExplicit(query))\n    }\n\n    if (isLeaf(query)) {\n      const key = isQueryPath ? query[KeyType.PATH] : keys[0];\n\n      const pattern = isQueryPath ? query[KeyType.PATTERN] : query[key];\n\n      if (!isString(pattern)) {\n        throw new Error(LOGICAL_SEARCH_INVALID_QUERY_FOR_KEY(key))\n      }\n\n      const obj = {\n        keyId: createKeyId(key),\n        pattern\n      };\n\n      if (auto) {\n        obj.searcher = createSearcher(pattern, options);\n      }\n\n      return obj\n    }\n\n    let node = {\n      children: [],\n      operator: keys[0]\n    };\n\n    keys.forEach((key) => {\n      const value = query[key];\n\n      if (isArray(value)) {\n        value.forEach((item) => {\n          node.children.push(next(item));\n        });\n      }\n    });\n\n    return node\n  };\n\n  if (!isExpression(query)) {\n    query = convertToExplicit(query);\n  }\n\n  return next(query)\n}\n\n// Practical scoring function\nfunction computeScore(\n  results,\n  { ignoreFieldNorm = Config.ignoreFieldNorm }\n) {\n  results.forEach((result) => {\n    let totalScore = 1;\n\n    result.matches.forEach(({ key, norm, score }) => {\n      const weight = key ? key.weight : null;\n\n      totalScore *= Math.pow(\n        score === 0 && weight ? Number.EPSILON : score,\n        (weight || 1) * (ignoreFieldNorm ? 1 : norm)\n      );\n    });\n\n    result.score = totalScore;\n  });\n}\n\nfunction transformMatches(result, data) {\n  const matches = result.matches;\n  data.matches = [];\n\n  if (!isDefined(matches)) {\n    return\n  }\n\n  matches.forEach((match) => {\n    if (!isDefined(match.indices) || !match.indices.length) {\n      return\n    }\n\n    const { indices, value } = match;\n\n    let obj = {\n      indices,\n      value\n    };\n\n    if (match.key) {\n      obj.key = match.key.src;\n    }\n\n    if (match.idx > -1) {\n      obj.refIndex = match.idx;\n    }\n\n    data.matches.push(obj);\n  });\n}\n\nfunction transformScore(result, data) {\n  data.score = result.score;\n}\n\nfunction format(\n  results,\n  docs,\n  {\n    includeMatches = Config.includeMatches,\n    includeScore = Config.includeScore\n  } = {}\n) {\n  const transformers = [];\n\n  if (includeMatches) transformers.push(transformMatches);\n  if (includeScore) transformers.push(transformScore);\n\n  return results.map((result) => {\n    const { idx } = result;\n\n    const data = {\n      item: docs[idx],\n      refIndex: idx\n    };\n\n    if (transformers.length) {\n      transformers.forEach((transformer) => {\n        transformer(result, data);\n      });\n    }\n\n    return data\n  })\n}\n\nclass Fuse {\n  constructor(docs, options = {}, index) {\n    this.options = { ...Config, ...options };\n\n    if (\n      this.options.useExtendedSearch &&\n      !true\n    ) {\n      throw new Error(EXTENDED_SEARCH_UNAVAILABLE)\n    }\n\n    this._keyStore = new KeyStore(this.options.keys);\n\n    this.setCollection(docs, index);\n  }\n\n  setCollection(docs, index) {\n    this._docs = docs;\n\n    if (index && !(index instanceof FuseIndex)) {\n      throw new Error(INCORRECT_INDEX_TYPE)\n    }\n\n    this._myIndex =\n      index ||\n      createIndex(this.options.keys, this._docs, {\n        getFn: this.options.getFn,\n        fieldNormWeight: this.options.fieldNormWeight\n      });\n  }\n\n  add(doc) {\n    if (!isDefined(doc)) {\n      return\n    }\n\n    this._docs.push(doc);\n    this._myIndex.add(doc);\n  }\n\n  remove(predicate = (/* doc, idx */) => false) {\n    const results = [];\n\n    for (let i = 0, len = this._docs.length; i < len; i += 1) {\n      const doc = this._docs[i];\n      if (predicate(doc, i)) {\n        this.removeAt(i);\n        i -= 1;\n        len -= 1;\n\n        results.push(doc);\n      }\n    }\n\n    return results\n  }\n\n  removeAt(idx) {\n    this._docs.splice(idx, 1);\n    this._myIndex.removeAt(idx);\n  }\n\n  getIndex() {\n    return this._myIndex\n  }\n\n  search(query, { limit = -1 } = {}) {\n    const {\n      includeMatches,\n      includeScore,\n      shouldSort,\n      sortFn,\n      ignoreFieldNorm\n    } = this.options;\n\n    let results = isString(query)\n      ? isString(this._docs[0])\n        ? this._searchStringList(query)\n        : this._searchObjectList(query)\n      : this._searchLogical(query);\n\n    computeScore(results, { ignoreFieldNorm });\n\n    if (shouldSort) {\n      results.sort(sortFn);\n    }\n\n    if (isNumber(limit) && limit > -1) {\n      results = results.slice(0, limit);\n    }\n\n    return format(results, this._docs, {\n      includeMatches,\n      includeScore\n    })\n  }\n\n  _searchStringList(query) {\n    const searcher = createSearcher(query, this.options);\n    const { records } = this._myIndex;\n    const results = [];\n\n    // Iterate over every string in the index\n    records.forEach(({ v: text, i: idx, n: norm }) => {\n      if (!isDefined(text)) {\n        return\n      }\n\n      const { isMatch, score, indices } = searcher.searchIn(text);\n\n      if (isMatch) {\n        results.push({\n          item: text,\n          idx,\n          matches: [{ score, value: text, norm, indices }]\n        });\n      }\n    });\n\n    return results\n  }\n\n  _searchLogical(query) {\n\n    const expression = parse(query, this.options);\n\n    const evaluate = (node, item, idx) => {\n      if (!node.children) {\n        const { keyId, searcher } = node;\n\n        const matches = this._findMatches({\n          key: this._keyStore.get(keyId),\n          value: this._myIndex.getValueForItemAtKeyId(item, keyId),\n          searcher\n        });\n\n        if (matches && matches.length) {\n          return [\n            {\n              idx,\n              item,\n              matches\n            }\n          ]\n        }\n\n        return []\n      }\n\n      const res = [];\n      for (let i = 0, len = node.children.length; i < len; i += 1) {\n        const child = node.children[i];\n        const result = evaluate(child, item, idx);\n        if (result.length) {\n          res.push(...result);\n        } else if (node.operator === LogicalOperator.AND) {\n          return []\n        }\n      }\n      return res\n    };\n\n    const records = this._myIndex.records;\n    const resultMap = {};\n    const results = [];\n\n    records.forEach(({ $: item, i: idx }) => {\n      if (isDefined(item)) {\n        let expResults = evaluate(expression, item, idx);\n\n        if (expResults.length) {\n          // Dedupe when adding\n          if (!resultMap[idx]) {\n            resultMap[idx] = { idx, item, matches: [] };\n            results.push(resultMap[idx]);\n          }\n          expResults.forEach(({ matches }) => {\n            resultMap[idx].matches.push(...matches);\n          });\n        }\n      }\n    });\n\n    return results\n  }\n\n  _searchObjectList(query) {\n    const searcher = createSearcher(query, this.options);\n    const { keys, records } = this._myIndex;\n    const results = [];\n\n    // List is Array<Object>\n    records.forEach(({ $: item, i: idx }) => {\n      if (!isDefined(item)) {\n        return\n      }\n\n      let matches = [];\n\n      // Iterate over every key (i.e, path), and fetch the value at that key\n      keys.forEach((key, keyIndex) => {\n        matches.push(\n          ...this._findMatches({\n            key,\n            value: item[keyIndex],\n            searcher\n          })\n        );\n      });\n\n      if (matches.length) {\n        results.push({\n          idx,\n          item,\n          matches\n        });\n      }\n    });\n\n    return results\n  }\n  _findMatches({ key, value, searcher }) {\n    if (!isDefined(value)) {\n      return []\n    }\n\n    let matches = [];\n\n    if (isArray(value)) {\n      value.forEach(({ v: text, i: idx, n: norm }) => {\n        if (!isDefined(text)) {\n          return\n        }\n\n        const { isMatch, score, indices } = searcher.searchIn(text);\n\n        if (isMatch) {\n          matches.push({\n            score,\n            key,\n            value: text,\n            idx,\n            norm,\n            indices\n          });\n        }\n      });\n    } else {\n      const { v: text, n: norm } = value;\n\n      const { isMatch, score, indices } = searcher.searchIn(text);\n\n      if (isMatch) {\n        matches.push({ score, key, value: text, norm, indices });\n      }\n    }\n\n    return matches\n  }\n}\n\nFuse.version = '7.1.0';\nFuse.createIndex = createIndex;\nFuse.parseIndex = parseIndex;\nFuse.config = Config;\n\n{\n  Fuse.parseQuery = parse;\n}\n\n{\n  register(ExtendedSearch);\n}\n\nexport { Fuse as default };\n","/* eslint-disable amp/no-console */\n\nimport Fuse from 'fuse.js'\nimport * as readline from 'node:readline'\n\ninterface Message {\n\tid: number\n\ttype: string\n\tfiles?: string[]\n\ttext?: string\n}\n\ninterface Response {\n\tid: number\n\ttype: 'response' | 'error'\n\tstatus?: 'ok'\n\tresults?: string[]\n\tmessage?: string\n}\n\nclass FuzzyServer {\n\tprivate fuse: Fuse<{ value: string; original: string }>\n\n\tconstructor() {\n\t\tthis.fuse = new Fuse([], {\n\t\t\tkeys: ['value'],\n\t\t\tincludeScore: true,\n\t\t\tlocation: 0,\n\t\t\tthreshold: 0.7,\n\t\t\tdistance: 256,\n\t\t\tignoreLocation: true,\n\t\t\tfindAllMatches: true,\n\t\t\tisCaseSensitive: false,\n\t\t})\n\t}\n\n\taddFiles(filePaths: string[]): void {\n\t\tfor (const file of filePaths) {\n\t\t\tthis.fuse.add({ value: file.toLowerCase(), original: file })\n\t\t}\n\t}\n\n\tremoveFiles(filePaths: string[]): void {\n\t\tfor (const file of filePaths) {\n\t\t\tthis.fuse.remove((f) => f.value === file)\n\t\t}\n\t}\n\n\tquery(text: string, limit = 50): string[] {\n\t\tconst results = this.fuse.search(text, { limit })\n\t\treturn results.map((result) => result.item.original)\n\t}\n\n\thandleMessage(message: Message): Response {\n\t\ttry {\n\t\t\tconst { id, type } = message\n\n\t\t\tswitch (type) {\n\t\t\t\tcase 'index:add':\n\t\t\t\t\tthis.addFiles(message.files || [])\n\t\t\t\t\treturn { id, type: 'response', status: 'ok' }\n\n\t\t\t\tcase 'index:remove':\n\t\t\t\t\tthis.removeFiles(message.files || [])\n\t\t\t\t\treturn { id, type: 'response', status: 'ok' }\n\n\t\t\t\tcase 'query': {\n\t\t\t\t\tconst results = this.query(message.text || '')\n\t\t\t\t\treturn { id, type: 'response', results }\n\t\t\t\t}\n\n\t\t\t\tdefault:\n\t\t\t\t\treturn { id, type: 'error', message: `Unknown type: ${type}` }\n\t\t\t}\n\t\t} catch (error) {\n\t\t\treturn {\n\t\t\t\tid: message.id,\n\t\t\t\ttype: 'error',\n\t\t\t\tmessage: error instanceof Error ? error.message : String(error),\n\t\t\t}\n\t\t}\n\t}\n\n\tstart(): void {\n\t\tconst rl = readline.createInterface({\n\t\t\tinput: process.stdin,\n\t\t\toutput: process.stdout,\n\t\t\tterminal: false,\n\t\t})\n\n\t\trl.on('line', (line) => {\n\t\t\ttry {\n\t\t\t\tconst message = JSON.parse(line) as Message\n\t\t\t\tconst response = this.handleMessage(message)\n\t\t\t\tconsole.log(JSON.stringify(response))\n\t\t\t} catch (error) {\n\t\t\t\tconsole.log(\n\t\t\t\t\tJSON.stringify({\n\t\t\t\t\t\tid: -1,\n\t\t\t\t\t\ttype: 'error',\n\t\t\t\t\t\tmessage: `Parse error: ${error instanceof Error ? error.message : String(error)}`,\n\t\t\t\t\t}),\n\t\t\t\t)\n\t\t\t}\n\t\t})\n\n\t\trl.on('close', () => {\n\t\t\tprocess.exit(0)\n\t\t})\n\t}\n}\n\nconst server = new FuzzyServer()\nserver.start()\n"],"names":["isArray","value","getTag","baseToString","result","toString","isString","isNumber","isBoolean","isObjectLike","isObject","isDefined","isBlank","INCORRECT_INDEX_TYPE","LOGICAL_SEARCH_INVALID_QUERY_FOR_KEY","key","PATTERN_LENGTH_TOO_LARGE","max","MISSING_KEY_PROPERTY","name","INVALID_KEY_WEIGHT_VALUE","hasOwn","KeyStore","keys","totalWeight","obj","createKey","keyId","path","id","src","weight","getFn","createKeyPath","createKeyId","get","list","arr","deepGet","index","i","len","MatchOptions","BasicOptions","a","b","FuzzyOptions","AdvancedOptions","Config","SPACE","norm","mantissa","cache","m","numTokens","n","FuseIndex","fieldNormWeight","docs","records","idx","doc","docIndex","item","record","keyIndex","subRecords","stack","nestedArrIndex","subRecord","k","createIndex","myIndex","parseIndex","data","computeScore$1","pattern","errors","currentLocation","expectedLocation","distance","ignoreLocation","accuracy","proximity","convertMaskToIndices","matchmask","minMatchCharLength","indices","start","end","match","MAX_BITS","search","text","patternAlphabet","location","threshold","findAllMatches","includeMatches","patternLen","textLen","currentThreshold","bestLocation","computeMatches","matchMask","score","lastBitArr","finalScore","binMax","mask","binMin","binMid","finish","bitArr","j","charMatch","createPatternAlphabet","char","stripDiacritics","str","BitapSearch","isCaseSensitive","ignoreDiacritics","addChunk","startIndex","remainder","allIndices","totalScore","hasMatches","alphabet","isMatch","BaseMatch","getMatch","exp","matches","ExactMatch","InverseExactMatch","PrefixExactMatch","InversePrefixExactMatch","SuffixExactMatch","InverseSuffixExactMatch","FuzzyMatch","IncludeMatch","searchers","searchersLen","SPACE_RE","OR_TOKEN","parseQuery","options","query","results","queryItem","found","searcher","token","MultiMatchSet","ExtendedSearch","_","numMatches","qLen","pLen","type","registeredSearchers","register","args","createSearcher","searcherClass","LogicalOperator","KeyType","isExpression","isPath","isLeaf","convertToExplicit","parse","auto","next","isQueryPath","node","computeScore","ignoreFieldNorm","transformMatches","transformScore","format","includeScore","transformers","transformer","Fuse","predicate","limit","shouldSort","sortFn","expression","evaluate","res","child","resultMap","expResults","FuzzyServer","filePaths","file","f","message","error","rl","readline","line","response","server"],"mappings":";;AASA,SAASA,EAAQC,GAAO;AACtB,SAAQ,MAAM,UAEV,MAAM,QAAQA,CAAK,IADnBC,GAAOD,CAAK,MAAM;AAExB;AAIA,SAASE,GAAaF,GAAO;AAE3B,MAAI,OAAOA,KAAS;AAClB,WAAOA;AAET,MAAIG,IAASH,IAAQ;AACrB,SAAOG,KAAU,OAAO,IAAIH,KAAS,SAAY,OAAOG;AAC1D;AAEA,SAASC,GAASJ,GAAO;AACvB,SAAOA,KAAS,OAAO,KAAKE,GAAaF,CAAK;AAChD;AAEA,SAASK,EAASL,GAAO;AACvB,SAAO,OAAOA,KAAU;AAC1B;AAEA,SAASM,GAASN,GAAO;AACvB,SAAO,OAAOA,KAAU;AAC1B;AAGA,SAASO,GAAUP,GAAO;AACxB,SACEA,MAAU,MACVA,MAAU,MACTQ,GAAaR,CAAK,KAAKC,GAAOD,CAAK,KAAK;AAE7C;AAEA,SAASS,GAAST,GAAO;AACvB,SAAO,OAAOA,KAAU;AAC1B;AAGA,SAASQ,GAAaR,GAAO;AAC3B,SAAOS,GAAST,CAAK,KAAKA,MAAU;AACtC;AAEA,SAASU,EAAUV,GAAO;AACxB,SAA8BA,KAAU;AAC1C;AAEA,SAASW,EAAQX,GAAO;AACtB,SAAO,CAACA,EAAM,OAAO;AACvB;AAIA,SAASC,GAAOD,GAAO;AACrB,SAAOA,KAAS,OACZA,MAAU,SACR,uBACA,kBACF,OAAO,UAAU,SAAS,KAAKA,CAAK;AAC1C;AAIA,MAAMY,KAAuB,0BAEvBC,KAAuC,CAACC,MAC5C,yBAAyBA,CAAG,IAExBC,KAA2B,CAACC,MAChC,iCAAiCA,CAAG,KAEhCC,KAAuB,CAACC,MAAS,WAAWA,CAAI,oBAEhDC,KAA2B,CAACL,MAChC,6BAA6BA,CAAG,gCAE5BM,IAAS,OAAO,UAAU;AAEhC,MAAMC,GAAS;AAAA,EACb,YAAYC,GAAM;AAChB,SAAK,QAAQ,CAAE,GACf,KAAK,UAAU,CAAE;AAEjB,QAAIC,IAAc;AAElB,IAAAD,EAAK,QAAQ,CAACR,MAAQ;AACpB,UAAIU,IAAMC,GAAUX,CAAG;AAEvB,WAAK,MAAM,KAAKU,CAAG,GACnB,KAAK,QAAQA,EAAI,EAAE,IAAIA,GAEvBD,KAAeC,EAAI;AAAA,IACzB,CAAK,GAGD,KAAK,MAAM,QAAQ,CAACV,MAAQ;AAC1B,MAAAA,EAAI,UAAUS;AAAA,IACpB,CAAK;AAAA,EACL;AAAA,EACE,IAAIG,GAAO;AACT,WAAO,KAAK,QAAQA,CAAK;AAAA,EAC7B;AAAA,EACE,OAAO;AACL,WAAO,KAAK;AAAA,EAChB;AAAA,EACE,SAAS;AACP,WAAO,KAAK,UAAU,KAAK,KAAK;AAAA,EACpC;AACA;AAEA,SAASD,GAAUX,GAAK;AACtB,MAAIa,IAAO,MACPC,IAAK,MACLC,IAAM,MACNC,IAAS,GACTC,IAAQ;AAEZ,MAAI1B,EAASS,CAAG,KAAKf,EAAQe,CAAG;AAC9B,IAAAe,IAAMf,GACNa,IAAOK,EAAclB,CAAG,GACxBc,IAAKK,EAAYnB,CAAG;AAAA,OACf;AACL,QAAI,CAACM,EAAO,KAAKN,GAAK,MAAM;AAC1B,YAAM,IAAI,MAAMG,GAAqB,MAAM,CAAC;AAG9C,UAAMC,IAAOJ,EAAI;AAGjB,QAFAe,IAAMX,GAEFE,EAAO,KAAKN,GAAK,QAAQ,MAC3BgB,IAAShB,EAAI,QAETgB,KAAU;AACZ,YAAM,IAAI,MAAMX,GAAyBD,CAAI,CAAC;AAIlD,IAAAS,IAAOK,EAAcd,CAAI,GACzBU,IAAKK,EAAYf,CAAI,GACrBa,IAAQjB,EAAI;AAAA,EAChB;AAEE,SAAO,EAAE,MAAAa,GAAM,IAAAC,GAAI,QAAAE,GAAQ,KAAAD,GAAK,OAAAE,EAAK;AACvC;AAEA,SAASC,EAAclB,GAAK;AAC1B,SAAOf,EAAQe,CAAG,IAAIA,IAAMA,EAAI,MAAM,GAAG;AAC3C;AAEA,SAASmB,EAAYnB,GAAK;AACxB,SAAOf,EAAQe,CAAG,IAAIA,EAAI,KAAK,GAAG,IAAIA;AACxC;AAEA,SAASoB,GAAIV,GAAKG,GAAM;AACtB,MAAIQ,IAAO,CAAE,GACTC,IAAM;AAEV,QAAMC,IAAU,CAACb,GAAKG,GAAMW,MAAU;AACpC,QAAK5B,EAAUc,CAAG;AAGlB,UAAI,CAACG,EAAKW,CAAK;AAEb,QAAAH,EAAK,KAAKX,CAAG;AAAA,WACR;AACL,YAAIV,IAAMa,EAAKW,CAAK;AAEpB,cAAMtC,IAAQwB,EAAIV,CAAG;AAErB,YAAI,CAACJ,EAAUV,CAAK;AAClB;AAKF,YACEsC,MAAUX,EAAK,SAAS,MACvBtB,EAASL,CAAK,KAAKM,GAASN,CAAK,KAAKO,GAAUP,CAAK;AAEtD,UAAAmC,EAAK,KAAK/B,GAASJ,CAAK,CAAC;AAAA,iBAChBD,EAAQC,CAAK,GAAG;AACzB,UAAAoC,IAAM;AAEN,mBAASG,IAAI,GAAGC,IAAMxC,EAAM,QAAQuC,IAAIC,GAAKD,KAAK;AAChD,YAAAF,EAAQrC,EAAMuC,CAAC,GAAGZ,GAAMW,IAAQ,CAAC;AAAA,QAE3C,MAAa,CAAIX,EAAK,UAEdU,EAAQrC,GAAO2B,GAAMW,IAAQ,CAAC;AAAA,MAEtC;AAAA,EACG;AAGD,SAAAD,EAAQb,GAAKnB,EAASsB,CAAI,IAAIA,EAAK,MAAM,GAAG,IAAIA,GAAM,CAAC,GAEhDS,IAAMD,IAAOA,EAAK,CAAC;AAC5B;AAEA,MAAMM,KAAe;AAAA;AAAA;AAAA;AAAA,EAInB,gBAAgB;AAAA;AAAA;AAAA,EAGhB,gBAAgB;AAAA;AAAA,EAEhB,oBAAoB;AACtB,GAEMC,KAAe;AAAA;AAAA;AAAA,EAGnB,iBAAiB;AAAA;AAAA,EAEjB,kBAAkB;AAAA;AAAA,EAElB,cAAc;AAAA;AAAA,EAEd,MAAM,CAAE;AAAA;AAAA,EAER,YAAY;AAAA;AAAA,EAEZ,QAAQ,CAACC,GAAGC,MACVD,EAAE,UAAUC,EAAE,QAASD,EAAE,MAAMC,EAAE,MAAM,KAAK,IAAKD,EAAE,QAAQC,EAAE,QAAQ,KAAK;AAC9E,GAEMC,KAAe;AAAA;AAAA,EAEnB,UAAU;AAAA;AAAA;AAAA,EAGV,WAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMX,UAAU;AACZ,GAEMC,KAAkB;AAAA;AAAA,EAEtB,mBAAmB;AAAA;AAAA;AAAA,EAGnB,OAAOZ;AAAA;AAAA;AAAA;AAAA,EAIP,gBAAgB;AAAA;AAAA;AAAA;AAAA,EAIhB,iBAAiB;AAAA;AAAA,EAEjB,iBAAiB;AACnB;AAEA,IAAIa,IAAS;AAAA,EACX,GAAGL;AAAA,EACH,GAAGD;AAAA,EACH,GAAGI;AAAA,EACH,GAAGC;AACL;AAEA,MAAME,KAAQ;AAId,SAASC,GAAKnB,IAAS,GAAGoB,IAAW,GAAG;AACtC,QAAMC,IAAQ,oBAAI,IAAK,GACjBC,IAAI,KAAK,IAAI,IAAIF,CAAQ;AAE/B,SAAO;AAAA,IACL,IAAIlD,GAAO;AACT,YAAMqD,IAAYrD,EAAM,MAAMgD,EAAK,EAAE;AAErC,UAAIG,EAAM,IAAIE,CAAS;AACrB,eAAOF,EAAM,IAAIE,CAAS;AAI5B,YAAMJ,IAAO,IAAI,KAAK,IAAII,GAAW,MAAMvB,CAAM,GAG3CwB,IAAI,WAAW,KAAK,MAAML,IAAOG,CAAC,IAAIA,CAAC;AAE7C,aAAAD,EAAM,IAAIE,GAAWC,CAAC,GAEfA;AAAA,IACR;AAAA,IACD,QAAQ;AACN,MAAAH,EAAM,MAAO;AAAA,IACnB;AAAA,EACA;AACA;AAEA,MAAMI,EAAU;AAAA,EACd,YAAY;AAAA,IACV,OAAAxB,IAAQgB,EAAO;AAAA,IACf,iBAAAS,IAAkBT,EAAO;AAAA,EAC1B,IAAG,IAAI;AACN,SAAK,OAAOE,GAAKO,GAAiB,CAAC,GACnC,KAAK,QAAQzB,GACb,KAAK,YAAY,IAEjB,KAAK,gBAAiB;AAAA,EAC1B;AAAA,EACE,WAAW0B,IAAO,IAAI;AACpB,SAAK,OAAOA;AAAA,EAChB;AAAA,EACE,gBAAgBC,IAAU,IAAI;AAC5B,SAAK,UAAUA;AAAA,EACnB;AAAA,EACE,QAAQpC,IAAO,IAAI;AACjB,SAAK,OAAOA,GACZ,KAAK,WAAW,CAAE,GAClBA,EAAK,QAAQ,CAACR,GAAK6C,MAAQ;AACzB,WAAK,SAAS7C,EAAI,EAAE,IAAI6C;AAAA,IAC9B,CAAK;AAAA,EACL;AAAA,EACE,SAAS;AACP,IAAI,KAAK,aAAa,CAAC,KAAK,KAAK,WAIjC,KAAK,YAAY,IAGbtD,EAAS,KAAK,KAAK,CAAC,CAAC,IACvB,KAAK,KAAK,QAAQ,CAACuD,GAAKC,MAAa;AACnC,WAAK,WAAWD,GAAKC,CAAQ;AAAA,IACrC,CAAO,IAGD,KAAK,KAAK,QAAQ,CAACD,GAAKC,MAAa;AACnC,WAAK,WAAWD,GAAKC,CAAQ;AAAA,IACrC,CAAO,GAGH,KAAK,KAAK,MAAO;AAAA,EACrB;AAAA;AAAA,EAEE,IAAID,GAAK;AACP,UAAMD,IAAM,KAAK,KAAM;AAEvB,IAAItD,EAASuD,CAAG,IACd,KAAK,WAAWA,GAAKD,CAAG,IAExB,KAAK,WAAWC,GAAKD,CAAG;AAAA,EAE9B;AAAA;AAAA,EAEE,SAASA,GAAK;AACZ,SAAK,QAAQ,OAAOA,GAAK,CAAC;AAG1B,aAASpB,IAAIoB,GAAKnB,IAAM,KAAK,KAAM,GAAED,IAAIC,GAAKD,KAAK;AACjD,WAAK,QAAQA,CAAC,EAAE,KAAK;AAAA,EAE3B;AAAA,EACE,uBAAuBuB,GAAMpC,GAAO;AAClC,WAAOoC,EAAK,KAAK,SAASpC,CAAK,CAAC;AAAA,EACpC;AAAA,EACE,OAAO;AACL,WAAO,KAAK,QAAQ;AAAA,EACxB;AAAA,EACE,WAAWkC,GAAKC,GAAU;AACxB,QAAI,CAACnD,EAAUkD,CAAG,KAAKjD,EAAQiD,CAAG;AAChC;AAGF,QAAIG,IAAS;AAAA,MACX,GAAGH;AAAA,MACH,GAAGC;AAAA,MACH,GAAG,KAAK,KAAK,IAAID,CAAG;AAAA,IACrB;AAED,SAAK,QAAQ,KAAKG,CAAM;AAAA,EAC5B;AAAA,EACE,WAAWH,GAAKC,GAAU;AACxB,QAAIE,IAAS,EAAE,GAAGF,GAAU,GAAG,CAAA,EAAI;AAGnC,SAAK,KAAK,QAAQ,CAAC/C,GAAKkD,MAAa;AACnC,UAAIhE,IAAQc,EAAI,QAAQA,EAAI,MAAM8C,CAAG,IAAI,KAAK,MAAMA,GAAK9C,EAAI,IAAI;AAEjE,UAAKJ,EAAUV,CAAK;AAIpB,YAAID,EAAQC,CAAK,GAAG;AAClB,cAAIiE,IAAa,CAAE;AACnB,gBAAMC,IAAQ,CAAC,EAAE,gBAAgB,IAAI,OAAAlE,EAAK,CAAE;AAE5C,iBAAOkE,EAAM,UAAQ;AACnB,kBAAM,EAAE,gBAAAC,GAAgB,OAAAnE,MAAUkE,EAAM,IAAK;AAE7C,gBAAKxD,EAAUV,CAAK;AAIpB,kBAAIK,EAASL,CAAK,KAAK,CAACW,EAAQX,CAAK,GAAG;AACtC,oBAAIoE,IAAY;AAAA,kBACd,GAAGpE;AAAA,kBACH,GAAGmE;AAAA,kBACH,GAAG,KAAK,KAAK,IAAInE,CAAK;AAAA,gBACvB;AAED,gBAAAiE,EAAW,KAAKG,CAAS;AAAA,cACrC,MAAiB,CAAIrE,EAAQC,CAAK,KACtBA,EAAM,QAAQ,CAAC8D,GAAMO,MAAM;AACzB,gBAAAH,EAAM,KAAK;AAAA,kBACT,gBAAgBG;AAAA,kBAChB,OAAOP;AAAA,gBACvB,CAAe;AAAA,cACf,CAAa;AAAA,UAEb;AACQ,UAAAC,EAAO,EAAEC,CAAQ,IAAIC;AAAA,QAC7B,WAAiB5D,EAASL,CAAK,KAAK,CAACW,EAAQX,CAAK,GAAG;AAC7C,cAAIoE,IAAY;AAAA,YACd,GAAGpE;AAAA,YACH,GAAG,KAAK,KAAK,IAAIA,CAAK;AAAA,UACvB;AAED,UAAA+D,EAAO,EAAEC,CAAQ,IAAII;AAAA,QAC7B;AAAA;AAAA,IACA,CAAK,GAED,KAAK,QAAQ,KAAKL,CAAM;AAAA,EAC5B;AAAA,EACE,SAAS;AACP,WAAO;AAAA,MACL,MAAM,KAAK;AAAA,MACX,SAAS,KAAK;AAAA,IACpB;AAAA,EACA;AACA;AAEA,SAASO,GACPhD,GACAmC,GACA,EAAE,OAAA1B,IAAQgB,EAAO,OAAO,iBAAAS,IAAkBT,EAAO,oBAAoB,CAAA,GACrE;AACA,QAAMwB,IAAU,IAAIhB,EAAU,EAAE,OAAAxB,GAAO,iBAAAyB,EAAe,CAAE;AACxD,SAAAe,EAAQ,QAAQjD,EAAK,IAAIG,EAAS,CAAC,GACnC8C,EAAQ,WAAWd,CAAI,GACvBc,EAAQ,OAAQ,GACTA;AACT;AAEA,SAASC,GACPC,GACA,EAAE,OAAA1C,IAAQgB,EAAO,OAAO,iBAAAS,IAAkBT,EAAO,oBAAoB,CAAA,GACrE;AACA,QAAM,EAAE,MAAAzB,GAAM,SAAAoC,EAAO,IAAKe,GACpBF,IAAU,IAAIhB,EAAU,EAAE,OAAAxB,GAAO,iBAAAyB,EAAe,CAAE;AACxD,SAAAe,EAAQ,QAAQjD,CAAI,GACpBiD,EAAQ,gBAAgBb,CAAO,GACxBa;AACT;AAEA,SAASG,EACPC,GACA;AAAA,EACE,QAAAC,IAAS;AAAA,EACT,iBAAAC,IAAkB;AAAA,EAClB,kBAAAC,IAAmB;AAAA,EACnB,UAAAC,IAAWhC,EAAO;AAAA,EAClB,gBAAAiC,IAAiBjC,EAAO;AAC5B,IAAM,CAAA,GACJ;AACA,QAAMkC,IAAWL,IAASD,EAAQ;AAElC,MAAIK;AACF,WAAOC;AAGT,QAAMC,IAAY,KAAK,IAAIJ,IAAmBD,CAAe;AAE7D,SAAKE,IAKEE,IAAWC,IAAYH,IAHrBG,IAAY,IAAMD;AAI7B;AAEA,SAASE,GACPC,IAAY,CAAE,GACdC,IAAqBtC,EAAO,oBAC5B;AACA,MAAIuC,IAAU,CAAE,GACZC,IAAQ,IACRC,IAAM,IACN,IAAI;AAER,WAAShD,IAAM4C,EAAU,QAAQ,IAAI5C,GAAK,KAAK,GAAG;AAChD,QAAIiD,IAAQL,EAAU,CAAC;AACvB,IAAIK,KAASF,MAAU,KACrBA,IAAQ,IACC,CAACE,KAASF,MAAU,OAC7BC,IAAM,IAAI,GACNA,IAAMD,IAAQ,KAAKF,KACrBC,EAAQ,KAAK,CAACC,GAAOC,CAAG,CAAC,GAE3BD,IAAQ;AAAA,EAEd;AAGE,SAAIH,EAAU,IAAI,CAAC,KAAK,IAAIG,KAASF,KACnCC,EAAQ,KAAK,CAACC,GAAO,IAAI,CAAC,CAAC,GAGtBD;AACT;AAGA,MAAMI,IAAW;AAEjB,SAASC,GACPC,GACAjB,GACAkB,GACA;AAAA,EACE,UAAAC,IAAW/C,EAAO;AAAA,EAClB,UAAAgC,IAAWhC,EAAO;AAAA,EAClB,WAAAgD,IAAYhD,EAAO;AAAA,EACnB,gBAAAiD,IAAiBjD,EAAO;AAAA,EACxB,oBAAAsC,IAAqBtC,EAAO;AAAA,EAC5B,gBAAAkD,IAAiBlD,EAAO;AAAA,EACxB,gBAAAiC,IAAiBjC,EAAO;AAC5B,IAAM,CAAA,GACJ;AACA,MAAI4B,EAAQ,SAASe;AACnB,UAAM,IAAI,MAAM3E,GAAyB2E,CAAQ,CAAC;AAGpD,QAAMQ,IAAavB,EAAQ,QAErBwB,IAAUP,EAAK,QAEfd,IAAmB,KAAK,IAAI,GAAG,KAAK,IAAIgB,GAAUK,CAAO,CAAC;AAEhE,MAAIC,IAAmBL,GAEnBM,IAAevB;AAInB,QAAMwB,IAAiBjB,IAAqB,KAAKY,GAE3CM,IAAYD,IAAiB,MAAMH,CAAO,IAAI,CAAE;AAEtD,MAAI7D;AAGJ,UAAQA,IAAQsD,EAAK,QAAQjB,GAAS0B,CAAY,KAAK,MAAI;AACzD,QAAIG,IAAQ9B,EAAeC,GAAS;AAAA,MAClC,iBAAiBrC;AAAA,MACjB,kBAAAwC;AAAA,MACA,UAAAC;AAAA,MACA,gBAAAC;AAAA,IACN,CAAK;AAKD,QAHAoB,IAAmB,KAAK,IAAII,GAAOJ,CAAgB,GACnDC,IAAe/D,IAAQ4D,GAEnBI,GAAgB;AAClB,UAAI/D,IAAI;AACR,aAAOA,IAAI2D;AACT,QAAAK,EAAUjE,IAAQC,CAAC,IAAI,GACvBA,KAAK;AAAA,IAEb;AAAA,EACA;AAGE,EAAA8D,IAAe;AAEf,MAAII,IAAa,CAAE,GACfC,IAAa,GACbC,IAAST,IAAaC;AAE1B,QAAMS,KAAO,KAAMV,IAAa;AAEhC,WAAS3D,IAAI,GAAGA,IAAI2D,GAAY3D,KAAK,GAAG;AAItC,QAAIsE,IAAS,GACTC,IAASH;AAEb,WAAOE,IAASC;AASd,MARcpC,EAAeC,GAAS;AAAA,QACpC,QAAQpC;AAAA,QACR,iBAAiBuC,IAAmBgC;AAAA,QACpC,kBAAAhC;AAAA,QACA,UAAAC;AAAA,QACA,gBAAAC;AAAA,MACR,CAAO,KAEYoB,IACXS,IAASC,IAETH,IAASG,GAGXA,IAAS,KAAK,OAAOH,IAASE,KAAU,IAAIA,CAAM;AAIpD,IAAAF,IAASG;AAET,QAAIvB,IAAQ,KAAK,IAAI,GAAGT,IAAmBgC,IAAS,CAAC,GACjDC,IAASf,IACTG,IACA,KAAK,IAAIrB,IAAmBgC,GAAQX,CAAO,IAAID,GAG/Cc,IAAS,MAAMD,IAAS,CAAC;AAE7B,IAAAC,EAAOD,IAAS,CAAC,KAAK,KAAKxE,KAAK;AAEhC,aAAS0E,IAAIF,GAAQE,KAAK1B,GAAO0B,KAAK,GAAG;AACvC,UAAIpC,IAAkBoC,IAAI,GACtBC,IAAYrB,EAAgBD,EAAK,OAAOf,CAAe,CAAC;AAgB5D,UAdIyB,MAEFC,EAAU1B,CAAe,IAAI,CAAC,CAAC,CAACqC,IAIlCF,EAAOC,CAAC,KAAMD,EAAOC,IAAI,CAAC,KAAK,IAAK,KAAKC,GAGrC3E,MACFyE,EAAOC,CAAC,MACJR,EAAWQ,IAAI,CAAC,IAAIR,EAAWQ,CAAC,MAAM,IAAK,IAAIR,EAAWQ,IAAI,CAAC,IAGjED,EAAOC,CAAC,IAAIL,OACdF,IAAahC,EAAeC,GAAS;AAAA,QACnC,QAAQpC;AAAA,QACR,iBAAAsC;AAAA,QACA,kBAAAC;AAAA,QACA,UAAAC;AAAA,QACA,gBAAAC;AAAA,MACV,CAAS,GAIG0B,KAAcN,IAAkB;AAMlC,YAJAA,IAAmBM,GACnBL,IAAexB,GAGXwB,KAAgBvB;AAClB;AAIF,QAAAS,IAAQ,KAAK,IAAI,GAAG,IAAIT,IAAmBuB,CAAY;AAAA,MACjE;AAAA,IAEA;AAWI,QARc3B,EAAeC,GAAS;AAAA,MACpC,QAAQpC,IAAI;AAAA,MACZ,iBAAiBuC;AAAA,MACjB,kBAAAA;AAAA,MACA,UAAAC;AAAA,MACA,gBAAAC;AAAA,IACN,CAAK,IAEWoB;AACV;AAGF,IAAAK,IAAaO;AAAA,EACjB;AAEE,QAAM7G,IAAS;AAAA,IACb,SAASkG,KAAgB;AAAA;AAAA,IAEzB,OAAO,KAAK,IAAI,MAAOK,CAAU;AAAA,EAClC;AAED,MAAIJ,GAAgB;AAClB,UAAMhB,IAAUH,GAAqBoB,GAAWlB,CAAkB;AAClE,IAAKC,EAAQ,SAEFW,MACT9F,EAAO,UAAUmF,KAFjBnF,EAAO,UAAU;AAAA,EAIvB;AAEE,SAAOA;AACT;AAEA,SAASgH,GAAsBxC,GAAS;AACtC,MAAIiC,IAAO,CAAE;AAEb,WAASrE,IAAI,GAAGC,IAAMmC,EAAQ,QAAQpC,IAAIC,GAAKD,KAAK,GAAG;AACrD,UAAM6E,IAAOzC,EAAQ,OAAOpC,CAAC;AAC7B,IAAAqE,EAAKQ,CAAI,KAAKR,EAAKQ,CAAI,KAAK,KAAM,KAAM5E,IAAMD,IAAI;AAAA,EACtD;AAEE,SAAOqE;AACT;AAEA,MAAMS,IAAkB,OAAO,UAAU,YAClC,CAACC,MAAQA,EAAI,UAAU,KAAK,EAAE,QAAQ,0kEAA0kE,EAAE,IAClnE,CAACA,MAAQA;AAEhB,MAAMC,GAAY;AAAA,EAChB,YACE5C,GACA;AAAA,IACE,UAAAmB,IAAW/C,EAAO;AAAA,IAClB,WAAAgD,IAAYhD,EAAO;AAAA,IACnB,UAAAgC,IAAWhC,EAAO;AAAA,IAClB,gBAAAkD,IAAiBlD,EAAO;AAAA,IACxB,gBAAAiD,IAAiBjD,EAAO;AAAA,IACxB,oBAAAsC,IAAqBtC,EAAO;AAAA,IAC5B,iBAAAyE,IAAkBzE,EAAO;AAAA,IACzB,kBAAA0E,IAAmB1E,EAAO;AAAA,IAC1B,gBAAAiC,IAAiBjC,EAAO;AAAA,EAC9B,IAAQ,CAAA,GACJ;AAmBA,QAlBA,KAAK,UAAU;AAAA,MACb,UAAA+C;AAAA,MACA,WAAAC;AAAA,MACA,UAAAhB;AAAA,MACA,gBAAAkB;AAAA,MACA,gBAAAD;AAAA,MACA,oBAAAX;AAAA,MACA,iBAAAmC;AAAA,MACA,kBAAAC;AAAA,MACA,gBAAAzC;AAAA,IACD,GAEDL,IAAU6C,IAAkB7C,IAAUA,EAAQ,YAAa,GAC3DA,IAAU8C,IAAmBJ,EAAgB1C,CAAO,IAAIA,GACxD,KAAK,UAAUA,GAEf,KAAK,SAAS,CAAE,GAEZ,CAAC,KAAK,QAAQ;AAChB;AAGF,UAAM+C,IAAW,CAAC/C,GAASgD,MAAe;AACxC,WAAK,OAAO,KAAK;AAAA,QACf,SAAAhD;AAAA,QACA,UAAUwC,GAAsBxC,CAAO;AAAA,QACvC,YAAAgD;AAAA,MACR,CAAO;AAAA,IACF,GAEKnF,IAAM,KAAK,QAAQ;AAEzB,QAAIA,IAAMkD,GAAU;AAClB,UAAInD,IAAI;AACR,YAAMqF,IAAYpF,IAAMkD,GAClBF,IAAMhD,IAAMoF;AAElB,aAAOrF,IAAIiD;AACT,QAAAkC,EAAS,KAAK,QAAQ,OAAOnF,GAAGmD,CAAQ,GAAGnD,CAAC,GAC5CA,KAAKmD;AAGP,UAAIkC,GAAW;AACb,cAAMD,IAAanF,IAAMkD;AACzB,QAAAgC,EAAS,KAAK,QAAQ,OAAOC,CAAU,GAAGA,CAAU;AAAA,MAC5D;AAAA,IACA;AACM,MAAAD,EAAS,KAAK,SAAS,CAAC;AAAA,EAE9B;AAAA,EAEE,SAAS9B,GAAM;AACb,UAAM,EAAE,iBAAA4B,GAAiB,kBAAAC,GAAkB,gBAAAxB,EAAgB,IAAG,KAAK;AAMnE,QAJAL,IAAO4B,IAAkB5B,IAAOA,EAAK,YAAa,GAClDA,IAAO6B,IAAmBJ,EAAgBzB,CAAI,IAAIA,GAG9C,KAAK,YAAYA,GAAM;AACzB,UAAIzF,IAAS;AAAA,QACX,SAAS;AAAA,QACT,OAAO;AAAA,MACR;AAED,aAAI8F,MACF9F,EAAO,UAAU,CAAC,CAAC,GAAGyF,EAAK,SAAS,CAAC,CAAC,IAGjCzF;AAAA,IACb;AAGI,UAAM;AAAA,MACJ,UAAA2F;AAAA,MACA,UAAAf;AAAA,MACA,WAAAgB;AAAA,MACA,gBAAAC;AAAA,MACA,oBAAAX;AAAA,MACA,gBAAAL;AAAA,IACD,IAAG,KAAK;AAET,QAAI6C,IAAa,CAAE,GACfC,IAAa,GACbC,IAAa;AAEjB,SAAK,OAAO,QAAQ,CAAC,EAAE,SAAApD,GAAS,UAAAqD,GAAU,YAAAL,QAAiB;AACzD,YAAM,EAAE,SAAAM,GAAS,OAAAzB,GAAO,SAAAlB,EAAO,IAAKK,GAAOC,GAAMjB,GAASqD,GAAU;AAAA,QAClE,UAAUlC,IAAW6B;AAAA,QACrB,UAAA5C;AAAA,QACA,WAAAgB;AAAA,QACA,gBAAAC;AAAA,QACA,oBAAAX;AAAA,QACA,gBAAAY;AAAA,QACA,gBAAAjB;AAAA,MACR,CAAO;AAED,MAAIiD,MACFF,IAAa,KAGfD,KAActB,GAEVyB,KAAW3C,MACbuC,IAAa,CAAC,GAAGA,GAAY,GAAGvC,CAAO;AAAA,IAE/C,CAAK;AAED,QAAInF,IAAS;AAAA,MACX,SAAS4H;AAAA,MACT,OAAOA,IAAaD,IAAa,KAAK,OAAO,SAAS;AAAA,IACvD;AAED,WAAIC,KAAc9B,MAChB9F,EAAO,UAAU0H,IAGZ1H;AAAA,EACX;AACA;AAEA,MAAM+H,EAAU;AAAA,EACd,YAAYvD,GAAS;AACnB,SAAK,UAAUA;AAAA,EACnB;AAAA,EACE,OAAO,aAAaA,GAAS;AAC3B,WAAOwD,EAASxD,GAAS,KAAK,UAAU;AAAA,EAC5C;AAAA,EACE,OAAO,cAAcA,GAAS;AAC5B,WAAOwD,EAASxD,GAAS,KAAK,WAAW;AAAA,EAC7C;AAAA,EACE,SAAiB;AAAA,EAAA;AACnB;AAEA,SAASwD,EAASxD,GAASyD,GAAK;AAC9B,QAAMC,IAAU1D,EAAQ,MAAMyD,CAAG;AACjC,SAAOC,IAAUA,EAAQ,CAAC,IAAI;AAChC;AAIA,MAAMC,WAAmBJ,EAAU;AAAA,EACjC,YAAYvD,GAAS;AACnB,UAAMA,CAAO;AAAA,EACjB;AAAA,EACE,WAAW,OAAO;AAChB,WAAO;AAAA,EACX;AAAA,EACE,WAAW,aAAa;AACtB,WAAO;AAAA,EACX;AAAA,EACE,WAAW,cAAc;AACvB,WAAO;AAAA,EACX;AAAA,EACE,OAAOiB,GAAM;AACX,UAAMqC,IAAUrC,MAAS,KAAK;AAE9B,WAAO;AAAA,MACL,SAAAqC;AAAA,MACA,OAAOA,IAAU,IAAI;AAAA,MACrB,SAAS,CAAC,GAAG,KAAK,QAAQ,SAAS,CAAC;AAAA,IAC1C;AAAA,EACA;AACA;AAIA,MAAMM,WAA0BL,EAAU;AAAA,EACxC,YAAYvD,GAAS;AACnB,UAAMA,CAAO;AAAA,EACjB;AAAA,EACE,WAAW,OAAO;AAChB,WAAO;AAAA,EACX;AAAA,EACE,WAAW,aAAa;AACtB,WAAO;AAAA,EACX;AAAA,EACE,WAAW,cAAc;AACvB,WAAO;AAAA,EACX;AAAA,EACE,OAAOiB,GAAM;AAEX,UAAMqC,IADQrC,EAAK,QAAQ,KAAK,OAAO,MACb;AAE1B,WAAO;AAAA,MACL,SAAAqC;AAAA,MACA,OAAOA,IAAU,IAAI;AAAA,MACrB,SAAS,CAAC,GAAGrC,EAAK,SAAS,CAAC;AAAA,IAClC;AAAA,EACA;AACA;AAIA,MAAM4C,WAAyBN,EAAU;AAAA,EACvC,YAAYvD,GAAS;AACnB,UAAMA,CAAO;AAAA,EACjB;AAAA,EACE,WAAW,OAAO;AAChB,WAAO;AAAA,EACX;AAAA,EACE,WAAW,aAAa;AACtB,WAAO;AAAA,EACX;AAAA,EACE,WAAW,cAAc;AACvB,WAAO;AAAA,EACX;AAAA,EACE,OAAOiB,GAAM;AACX,UAAMqC,IAAUrC,EAAK,WAAW,KAAK,OAAO;AAE5C,WAAO;AAAA,MACL,SAAAqC;AAAA,MACA,OAAOA,IAAU,IAAI;AAAA,MACrB,SAAS,CAAC,GAAG,KAAK,QAAQ,SAAS,CAAC;AAAA,IAC1C;AAAA,EACA;AACA;AAIA,MAAMQ,WAAgCP,EAAU;AAAA,EAC9C,YAAYvD,GAAS;AACnB,UAAMA,CAAO;AAAA,EACjB;AAAA,EACE,WAAW,OAAO;AAChB,WAAO;AAAA,EACX;AAAA,EACE,WAAW,aAAa;AACtB,WAAO;AAAA,EACX;AAAA,EACE,WAAW,cAAc;AACvB,WAAO;AAAA,EACX;AAAA,EACE,OAAOiB,GAAM;AACX,UAAMqC,IAAU,CAACrC,EAAK,WAAW,KAAK,OAAO;AAE7C,WAAO;AAAA,MACL,SAAAqC;AAAA,MACA,OAAOA,IAAU,IAAI;AAAA,MACrB,SAAS,CAAC,GAAGrC,EAAK,SAAS,CAAC;AAAA,IAClC;AAAA,EACA;AACA;AAIA,MAAM8C,WAAyBR,EAAU;AAAA,EACvC,YAAYvD,GAAS;AACnB,UAAMA,CAAO;AAAA,EACjB;AAAA,EACE,WAAW,OAAO;AAChB,WAAO;AAAA,EACX;AAAA,EACE,WAAW,aAAa;AACtB,WAAO;AAAA,EACX;AAAA,EACE,WAAW,cAAc;AACvB,WAAO;AAAA,EACX;AAAA,EACE,OAAOiB,GAAM;AACX,UAAMqC,IAAUrC,EAAK,SAAS,KAAK,OAAO;AAE1C,WAAO;AAAA,MACL,SAAAqC;AAAA,MACA,OAAOA,IAAU,IAAI;AAAA,MACrB,SAAS,CAACrC,EAAK,SAAS,KAAK,QAAQ,QAAQA,EAAK,SAAS,CAAC;AAAA,IAClE;AAAA,EACA;AACA;AAIA,MAAM+C,WAAgCT,EAAU;AAAA,EAC9C,YAAYvD,GAAS;AACnB,UAAMA,CAAO;AAAA,EACjB;AAAA,EACE,WAAW,OAAO;AAChB,WAAO;AAAA,EACX;AAAA,EACE,WAAW,aAAa;AACtB,WAAO;AAAA,EACX;AAAA,EACE,WAAW,cAAc;AACvB,WAAO;AAAA,EACX;AAAA,EACE,OAAOiB,GAAM;AACX,UAAMqC,IAAU,CAACrC,EAAK,SAAS,KAAK,OAAO;AAC3C,WAAO;AAAA,MACL,SAAAqC;AAAA,MACA,OAAOA,IAAU,IAAI;AAAA,MACrB,SAAS,CAAC,GAAGrC,EAAK,SAAS,CAAC;AAAA,IAClC;AAAA,EACA;AACA;AAEA,MAAMgD,WAAmBV,EAAU;AAAA,EACjC,YACEvD,GACA;AAAA,IACE,UAAAmB,IAAW/C,EAAO;AAAA,IAClB,WAAAgD,IAAYhD,EAAO;AAAA,IACnB,UAAAgC,IAAWhC,EAAO;AAAA,IAClB,gBAAAkD,IAAiBlD,EAAO;AAAA,IACxB,gBAAAiD,IAAiBjD,EAAO;AAAA,IACxB,oBAAAsC,IAAqBtC,EAAO;AAAA,IAC5B,iBAAAyE,IAAkBzE,EAAO;AAAA,IACzB,kBAAA0E,IAAmB1E,EAAO;AAAA,IAC1B,gBAAAiC,IAAiBjC,EAAO;AAAA,EAC9B,IAAQ,CAAA,GACJ;AACA,UAAM4B,CAAO,GACb,KAAK,eAAe,IAAI4C,GAAY5C,GAAS;AAAA,MAC3C,UAAAmB;AAAA,MACA,WAAAC;AAAA,MACA,UAAAhB;AAAA,MACA,gBAAAkB;AAAA,MACA,gBAAAD;AAAA,MACA,oBAAAX;AAAA,MACA,iBAAAmC;AAAA,MACA,kBAAAC;AAAA,MACA,gBAAAzC;AAAA,IACN,CAAK;AAAA,EACL;AAAA,EACE,WAAW,OAAO;AAChB,WAAO;AAAA,EACX;AAAA,EACE,WAAW,aAAa;AACtB,WAAO;AAAA,EACX;AAAA,EACE,WAAW,cAAc;AACvB,WAAO;AAAA,EACX;AAAA,EACE,OAAOY,GAAM;AACX,WAAO,KAAK,aAAa,SAASA,CAAI;AAAA,EAC1C;AACA;AAIA,MAAMiD,WAAqBX,EAAU;AAAA,EACnC,YAAYvD,GAAS;AACnB,UAAMA,CAAO;AAAA,EACjB;AAAA,EACE,WAAW,OAAO;AAChB,WAAO;AAAA,EACX;AAAA,EACE,WAAW,aAAa;AACtB,WAAO;AAAA,EACX;AAAA,EACE,WAAW,cAAc;AACvB,WAAO;AAAA,EACX;AAAA,EACE,OAAOiB,GAAM;AACX,QAAIE,IAAW,GACXxD;AAEJ,UAAMgD,IAAU,CAAE,GACZY,IAAa,KAAK,QAAQ;AAGhC,YAAQ5D,IAAQsD,EAAK,QAAQ,KAAK,SAASE,CAAQ,KAAK;AACtD,MAAAA,IAAWxD,IAAQ4D,GACnBZ,EAAQ,KAAK,CAAChD,GAAOwD,IAAW,CAAC,CAAC;AAGpC,UAAMmC,IAAU,CAAC,CAAC3C,EAAQ;AAE1B,WAAO;AAAA,MACL,SAAA2C;AAAA,MACA,OAAOA,IAAU,IAAI;AAAA,MACrB,SAAA3C;AAAA,IACN;AAAA,EACA;AACA;AAGA,MAAMwD,IAAY;AAAA,EAChBR;AAAA,EACAO;AAAA,EACAL;AAAA,EACAC;AAAA,EACAE;AAAA,EACAD;AAAA,EACAH;AAAA,EACAK;AACF,GAEMG,IAAeD,EAAU,QAGzBE,KAAW,sCACXC,KAAW;AAKjB,SAASC,GAAWvE,GAASwE,IAAU,IAAI;AACzC,SAAOxE,EAAQ,MAAMsE,EAAQ,EAAE,IAAI,CAACnF,MAAS;AAC3C,QAAIsF,IAAQtF,EACT,KAAI,EACJ,MAAMkF,EAAQ,EACd,OAAO,CAAClF,MAASA,KAAQ,CAAC,CAACA,EAAK,MAAM,GAErCuF,IAAU,CAAE;AAChB,aAAS,IAAI,GAAG7G,IAAM4G,EAAM,QAAQ,IAAI5G,GAAK,KAAK,GAAG;AACnD,YAAM8G,IAAYF,EAAM,CAAC;AAGzB,UAAIG,IAAQ,IACR5F,IAAM;AACV,aAAO,CAAC4F,KAAS,EAAE5F,IAAMoF,KAAc;AACrC,cAAMS,IAAWV,EAAUnF,CAAG;AAC9B,YAAI8F,IAAQD,EAAS,aAAaF,CAAS;AAC3C,QAAIG,MACFJ,EAAQ,KAAK,IAAIG,EAASC,GAAON,CAAO,CAAC,GACzCI,IAAQ;AAAA,MAElB;AAEM,UAAI,CAAAA;AAMJ,aADA5F,IAAM,IACC,EAAEA,IAAMoF,KAAc;AAC3B,gBAAMS,IAAWV,EAAUnF,CAAG;AAC9B,cAAI8F,IAAQD,EAAS,cAAcF,CAAS;AAC5C,cAAIG,GAAO;AACT,YAAAJ,EAAQ,KAAK,IAAIG,EAASC,GAAON,CAAO,CAAC;AACzC;AAAA,UACV;AAAA,QACA;AAAA,IACA;AAEI,WAAOE;AAAA,EACR,CAAA;AACH;AAIA,MAAMK,KAAgB,oBAAI,IAAI,CAACd,GAAW,MAAMC,GAAa,IAAI,CAAC;AA8BlE,MAAMc,GAAe;AAAA,EACnB,YACEhF,GACA;AAAA,IACE,iBAAA6C,IAAkBzE,EAAO;AAAA,IACzB,kBAAA0E,IAAmB1E,EAAO;AAAA,IAC1B,gBAAAkD,IAAiBlD,EAAO;AAAA,IACxB,oBAAAsC,IAAqBtC,EAAO;AAAA,IAC5B,gBAAAiC,IAAiBjC,EAAO;AAAA,IACxB,gBAAAiD,IAAiBjD,EAAO;AAAA,IACxB,UAAA+C,IAAW/C,EAAO;AAAA,IAClB,WAAAgD,IAAYhD,EAAO;AAAA,IACnB,UAAAgC,IAAWhC,EAAO;AAAA,EACxB,IAAQ,CAAA,GACJ;AACA,SAAK,QAAQ,MACb,KAAK,UAAU;AAAA,MACb,iBAAAyE;AAAA,MACA,kBAAAC;AAAA,MACA,gBAAAxB;AAAA,MACA,oBAAAZ;AAAA,MACA,gBAAAW;AAAA,MACA,gBAAAhB;AAAA,MACA,UAAAc;AAAA,MACA,WAAAC;AAAA,MACA,UAAAhB;AAAA,IACD,GAEDJ,IAAU6C,IAAkB7C,IAAUA,EAAQ,YAAa,GAC3DA,IAAU8C,IAAmBJ,EAAgB1C,CAAO,IAAIA,GACxD,KAAK,UAAUA,GACf,KAAK,QAAQuE,GAAW,KAAK,SAAS,KAAK,OAAO;AAAA,EACtD;AAAA,EAEE,OAAO,UAAUU,GAAGT,GAAS;AAC3B,WAAOA,EAAQ;AAAA,EACnB;AAAA,EAEE,SAASvD,GAAM;AACb,UAAMwD,IAAQ,KAAK;AAEnB,QAAI,CAACA;AACH,aAAO;AAAA,QACL,SAAS;AAAA,QACT,OAAO;AAAA,MACf;AAGI,UAAM,EAAE,gBAAAnD,GAAgB,iBAAAuB,GAAiB,kBAAAC,EAAkB,IAAG,KAAK;AAEnE,IAAA7B,IAAO4B,IAAkB5B,IAAOA,EAAK,YAAa,GAClDA,IAAO6B,IAAmBJ,EAAgBzB,CAAI,IAAIA;AAElD,QAAIiE,IAAa,GACbhC,IAAa,CAAE,GACfC,IAAa;AAGjB,aAASvF,IAAI,GAAGuH,IAAOV,EAAM,QAAQ7G,IAAIuH,GAAMvH,KAAK,GAAG;AACrD,YAAMuG,IAAYM,EAAM7G,CAAC;AAGzB,MAAAsF,EAAW,SAAS,GACpBgC,IAAa;AAGb,eAAS5C,IAAI,GAAG8C,IAAOjB,EAAU,QAAQ7B,IAAI8C,GAAM9C,KAAK,GAAG;AACzD,cAAMuC,IAAWV,EAAU7B,CAAC,GACtB,EAAE,SAAAgB,GAAS,SAAA3C,GAAS,OAAAkB,EAAO,IAAGgD,EAAS,OAAO5D,CAAI;AAExD,YAAIqC;AAGF,cAFA4B,KAAc,GACd/B,KAActB,GACVP,GAAgB;AAClB,kBAAM+D,IAAOR,EAAS,YAAY;AAClC,YAAIE,GAAc,IAAIM,CAAI,IACxBnC,IAAa,CAAC,GAAGA,GAAY,GAAGvC,CAAO,IAEvCuC,EAAW,KAAKvC,CAAO;AAAA,UAErC;AAAA,eACe;AACL,UAAAwC,IAAa,GACb+B,IAAa,GACbhC,EAAW,SAAS;AACpB;AAAA,QACV;AAAA,MACA;AAGM,UAAIgC,GAAY;AACd,YAAI1J,IAAS;AAAA,UACX,SAAS;AAAA,UACT,OAAO2H,IAAa+B;AAAA,QACrB;AAED,eAAI5D,MACF9F,EAAO,UAAU0H,IAGZ1H;AAAA,MACf;AAAA,IACA;AAGI,WAAO;AAAA,MACL,SAAS;AAAA,MACT,OAAO;AAAA,IACb;AAAA,EACA;AACA;AAEA,MAAM8J,IAAsB,CAAE;AAE9B,SAASC,MAAYC,GAAM;AACzB,EAAAF,EAAoB,KAAK,GAAGE,CAAI;AAClC;AAEA,SAASC,EAAezF,GAASwE,GAAS;AACxC,WAAS5G,IAAI,GAAGC,IAAMyH,EAAoB,QAAQ1H,IAAIC,GAAKD,KAAK,GAAG;AACjE,QAAI8H,IAAgBJ,EAAoB1H,CAAC;AACzC,QAAI8H,EAAc,UAAU1F,GAASwE,CAAO;AAC1C,aAAO,IAAIkB,EAAc1F,GAASwE,CAAO;AAAA,EAE/C;AAEE,SAAO,IAAI5B,GAAY5C,GAASwE,CAAO;AACzC;AAEA,MAAMmB,IAAkB;AAAA,EACtB,KAAK;AAAA,EACL,IAAI;AACN,GAEMC,IAAU;AAAA,EACd,MAAM;AAAA,EACN,SAAS;AACX,GAEMC,IAAe,CAACpB,MACpB,CAAC,EAAEA,EAAMkB,EAAgB,GAAG,KAAKlB,EAAMkB,EAAgB,EAAE,IAErDG,KAAS,CAACrB,MAAU,CAAC,CAACA,EAAMmB,EAAQ,IAAI,GAExCG,KAAS,CAACtB,MACd,CAACrJ,EAAQqJ,CAAK,KAAK3I,GAAS2I,CAAK,KAAK,CAACoB,EAAapB,CAAK,GAErDuB,IAAoB,CAACvB,OAAW;AAAA,EACpC,CAACkB,EAAgB,GAAG,GAAG,OAAO,KAAKlB,CAAK,EAAE,IAAI,CAACtI,OAAS;AAAA,IACtD,CAACA,CAAG,GAAGsI,EAAMtI,CAAG;AAAA,EACpB,EAAI;AACJ;AAIA,SAAS8J,GAAMxB,GAAOD,GAAS,EAAE,MAAA0B,IAAO,GAAM,IAAG,IAAI;AACnD,QAAMC,IAAO,CAAC1B,MAAU;AACtB,QAAI9H,IAAO,OAAO,KAAK8H,CAAK;AAE5B,UAAM2B,IAAcN,GAAOrB,CAAK;AAEhC,QAAI,CAAC2B,KAAezJ,EAAK,SAAS,KAAK,CAACkJ,EAAapB,CAAK;AACxD,aAAO0B,EAAKH,EAAkBvB,CAAK,CAAC;AAGtC,QAAIsB,GAAOtB,CAAK,GAAG;AACjB,YAAMtI,IAAMiK,IAAc3B,EAAMmB,EAAQ,IAAI,IAAIjJ,EAAK,CAAC,GAEhDqD,IAAUoG,IAAc3B,EAAMmB,EAAQ,OAAO,IAAInB,EAAMtI,CAAG;AAEhE,UAAI,CAACT,EAASsE,CAAO;AACnB,cAAM,IAAI,MAAM9D,GAAqCC,CAAG,CAAC;AAG3D,YAAMU,IAAM;AAAA,QACV,OAAOS,EAAYnB,CAAG;AAAA,QACtB,SAAA6D;AAAA,MACD;AAED,aAAIkG,MACFrJ,EAAI,WAAW4I,EAAezF,GAASwE,CAAO,IAGzC3H;AAAA,IACb;AAEI,QAAIwJ,IAAO;AAAA,MACT,UAAU,CAAE;AAAA,MACZ,UAAU1J,EAAK,CAAC;AAAA,IACjB;AAED,WAAAA,EAAK,QAAQ,CAACR,MAAQ;AACpB,YAAMd,IAAQoJ,EAAMtI,CAAG;AAEvB,MAAIf,EAAQC,CAAK,KACfA,EAAM,QAAQ,CAAC8D,MAAS;AACtB,QAAAkH,EAAK,SAAS,KAAKF,EAAKhH,CAAI,CAAC;AAAA,MACvC,CAAS;AAAA,IAET,CAAK,GAEMkH;AAAA,EACR;AAED,SAAKR,EAAapB,CAAK,MACrBA,IAAQuB,EAAkBvB,CAAK,IAG1B0B,EAAK1B,CAAK;AACnB;AAGA,SAAS6B,GACP5B,GACA,EAAE,iBAAA6B,IAAkBnI,EAAO,gBAAe,GAC1C;AACA,EAAAsG,EAAQ,QAAQ,CAAClJ,MAAW;AAC1B,QAAI2H,IAAa;AAEjB,IAAA3H,EAAO,QAAQ,QAAQ,CAAC,EAAE,KAAAW,GAAK,MAAAmC,GAAM,OAAAuD,QAAY;AAC/C,YAAM1E,IAAShB,IAAMA,EAAI,SAAS;AAElC,MAAAgH,KAAc,KAAK;AAAA,QACjBtB,MAAU,KAAK1E,IAAS,OAAO,UAAU0E;AAAA,SACxC1E,KAAU,MAAMoJ,IAAkB,IAAIjI;AAAA,MACxC;AAAA,IACP,CAAK,GAED9C,EAAO,QAAQ2H;AAAA,EACnB,CAAG;AACH;AAEA,SAASqD,GAAiBhL,GAAQsE,GAAM;AACtC,QAAM4D,IAAUlI,EAAO;AAGvB,EAFAsE,EAAK,UAAU,CAAE,GAEZ/D,EAAU2H,CAAO,KAItBA,EAAQ,QAAQ,CAAC5C,MAAU;AACzB,QAAI,CAAC/E,EAAU+E,EAAM,OAAO,KAAK,CAACA,EAAM,QAAQ;AAC9C;AAGF,UAAM,EAAE,SAAAH,GAAS,OAAAtF,EAAK,IAAKyF;AAE3B,QAAIjE,IAAM;AAAA,MACR,SAAA8D;AAAA,MACA,OAAAtF;AAAA,IACD;AAED,IAAIyF,EAAM,QACRjE,EAAI,MAAMiE,EAAM,IAAI,MAGlBA,EAAM,MAAM,OACdjE,EAAI,WAAWiE,EAAM,MAGvBhB,EAAK,QAAQ,KAAKjD,CAAG;AAAA,EACzB,CAAG;AACH;AAEA,SAAS4J,GAAejL,GAAQsE,GAAM;AACpC,EAAAA,EAAK,QAAQtE,EAAO;AACtB;AAEA,SAASkL,GACPhC,GACA5F,GACA;AAAA,EACE,gBAAAwC,IAAiBlD,EAAO;AAAA,EACxB,cAAAuI,IAAevI,EAAO;AAC1B,IAAM,CAAA,GACJ;AACA,QAAMwI,IAAe,CAAE;AAEvB,SAAItF,KAAgBsF,EAAa,KAAKJ,EAAgB,GAClDG,KAAcC,EAAa,KAAKH,EAAc,GAE3C/B,EAAQ,IAAI,CAAClJ,MAAW;AAC7B,UAAM,EAAE,KAAAwD,EAAG,IAAKxD,GAEVsE,IAAO;AAAA,MACX,MAAMhB,EAAKE,CAAG;AAAA,MACd,UAAUA;AAAA,IACX;AAED,WAAI4H,EAAa,UACfA,EAAa,QAAQ,CAACC,MAAgB;AACpC,MAAAA,EAAYrL,GAAQsE,CAAI;AAAA,IAChC,CAAO,GAGIA;AAAA,EACR,CAAA;AACH;AAEA,MAAMgH,EAAK;AAAA,EACT,YAAYhI,GAAM0F,IAAU,CAAA,GAAI7G,GAAO;AACrC,SAAK,UAAU,EAAE,GAAGS,GAAQ,GAAGoG,EAAS,GAGtC,KAAK,QAAQ,mBAMf,KAAK,YAAY,IAAI9H,GAAS,KAAK,QAAQ,IAAI,GAE/C,KAAK,cAAcoC,GAAMnB,CAAK;AAAA,EAClC;AAAA,EAEE,cAAcmB,GAAMnB,GAAO;AAGzB,QAFA,KAAK,QAAQmB,GAETnB,KAAS,EAAEA,aAAiBiB;AAC9B,YAAM,IAAI,MAAM3C,EAAoB;AAGtC,SAAK,WACH0B,KACAgC,GAAY,KAAK,QAAQ,MAAM,KAAK,OAAO;AAAA,MACzC,OAAO,KAAK,QAAQ;AAAA,MACpB,iBAAiB,KAAK,QAAQ;AAAA,IACtC,CAAO;AAAA,EACP;AAAA,EAEE,IAAIV,GAAK;AACP,IAAKlD,EAAUkD,CAAG,MAIlB,KAAK,MAAM,KAAKA,CAAG,GACnB,KAAK,SAAS,IAAIA,CAAG;AAAA,EACzB;AAAA,EAEE,OAAO8H,IAAY,MAAoB,IAAO;AAC5C,UAAMrC,IAAU,CAAE;AAElB,aAAS9G,IAAI,GAAGC,IAAM,KAAK,MAAM,QAAQD,IAAIC,GAAKD,KAAK,GAAG;AACxD,YAAMqB,IAAM,KAAK,MAAMrB,CAAC;AACxB,MAAImJ,EAAU9H,GAAKrB,CAAC,MAClB,KAAK,SAASA,CAAC,GACfA,KAAK,GACLC,KAAO,GAEP6G,EAAQ,KAAKzF,CAAG;AAAA,IAExB;AAEI,WAAOyF;AAAA,EACX;AAAA,EAEE,SAAS1F,GAAK;AACZ,SAAK,MAAM,OAAOA,GAAK,CAAC,GACxB,KAAK,SAAS,SAASA,CAAG;AAAA,EAC9B;AAAA,EAEE,WAAW;AACT,WAAO,KAAK;AAAA,EAChB;AAAA,EAEE,OAAOyF,GAAO,EAAE,OAAAuC,IAAQ,GAAE,IAAK,CAAA,GAAI;AACjC,UAAM;AAAA,MACJ,gBAAA1F;AAAA,MACA,cAAAqF;AAAA,MACA,YAAAM;AAAA,MACA,QAAAC;AAAA,MACA,iBAAAX;AAAA,IACD,IAAG,KAAK;AAET,QAAI7B,IAAUhJ,EAAS+I,CAAK,IACxB/I,EAAS,KAAK,MAAM,CAAC,CAAC,IACpB,KAAK,kBAAkB+I,CAAK,IAC5B,KAAK,kBAAkBA,CAAK,IAC9B,KAAK,eAAeA,CAAK;AAE7B,WAAA6B,GAAa5B,GAAS,EAAE,iBAAA6B,GAAiB,GAErCU,KACFvC,EAAQ,KAAKwC,CAAM,GAGjBvL,GAASqL,CAAK,KAAKA,IAAQ,OAC7BtC,IAAUA,EAAQ,MAAM,GAAGsC,CAAK,IAG3BN,GAAOhC,GAAS,KAAK,OAAO;AAAA,MACjC,gBAAApD;AAAA,MACA,cAAAqF;AAAA,IACD,CAAA;AAAA,EACL;AAAA,EAEE,kBAAkBlC,GAAO;AACvB,UAAMI,IAAWY,EAAehB,GAAO,KAAK,OAAO,GAC7C,EAAE,SAAA1F,MAAY,KAAK,UACnB2F,IAAU,CAAE;AAGlB,WAAA3F,EAAQ,QAAQ,CAAC,EAAE,GAAGkC,GAAM,GAAGjC,GAAK,GAAGV,QAAW;AAChD,UAAI,CAACvC,EAAUkF,CAAI;AACjB;AAGF,YAAM,EAAE,SAAAqC,GAAS,OAAAzB,GAAO,SAAAlB,EAAS,IAAGkE,EAAS,SAAS5D,CAAI;AAE1D,MAAIqC,KACFoB,EAAQ,KAAK;AAAA,QACX,MAAMzD;AAAA,QACN,KAAAjC;AAAA,QACA,SAAS,CAAC,EAAE,OAAA6C,GAAO,OAAOZ,GAAM,MAAA3C,GAAM,SAAAqC,EAAS,CAAA;AAAA,MACzD,CAAS;AAAA,IAET,CAAK,GAEM+D;AAAA,EACX;AAAA,EAEE,eAAeD,GAAO;AAEpB,UAAM0C,IAAalB,GAAMxB,GAAO,KAAK,OAAO,GAEtC2C,IAAW,CAACf,GAAMlH,GAAMH,MAAQ;AACpC,UAAI,CAACqH,EAAK,UAAU;AAClB,cAAM,EAAE,OAAAtJ,GAAO,UAAA8H,EAAQ,IAAKwB,GAEtB3C,IAAU,KAAK,aAAa;AAAA,UAChC,KAAK,KAAK,UAAU,IAAI3G,CAAK;AAAA,UAC7B,OAAO,KAAK,SAAS,uBAAuBoC,GAAMpC,CAAK;AAAA,UACvD,UAAA8H;AAAA,QACV,CAAS;AAED,eAAInB,KAAWA,EAAQ,SACd;AAAA,UACL;AAAA,YACE,KAAA1E;AAAA,YACA,MAAAG;AAAA,YACA,SAAAuE;AAAA,UACd;AAAA,QACA,IAGe,CAAA;AAAA,MACf;AAEM,YAAM2D,IAAM,CAAE;AACd,eAASzJ,IAAI,GAAGC,IAAMwI,EAAK,SAAS,QAAQzI,IAAIC,GAAKD,KAAK,GAAG;AAC3D,cAAM0J,IAAQjB,EAAK,SAASzI,CAAC,GACvBpC,IAAS4L,EAASE,GAAOnI,GAAMH,CAAG;AACxC,YAAIxD,EAAO;AACT,UAAA6L,EAAI,KAAK,GAAG7L,CAAM;AAAA,iBACT6K,EAAK,aAAaV,EAAgB;AAC3C,iBAAO,CAAA;AAAA,MAEjB;AACM,aAAO0B;AAAA,IACR,GAEKtI,IAAU,KAAK,SAAS,SACxBwI,IAAY,CAAE,GACd7C,IAAU,CAAE;AAElB,WAAA3F,EAAQ,QAAQ,CAAC,EAAE,GAAGI,GAAM,GAAGH,QAAU;AACvC,UAAIjD,EAAUoD,CAAI,GAAG;AACnB,YAAIqI,IAAaJ,EAASD,GAAYhI,GAAMH,CAAG;AAE/C,QAAIwI,EAAW,WAERD,EAAUvI,CAAG,MAChBuI,EAAUvI,CAAG,IAAI,EAAE,KAAAA,GAAK,MAAAG,GAAM,SAAS,GAAI,GAC3CuF,EAAQ,KAAK6C,EAAUvI,CAAG,CAAC,IAE7BwI,EAAW,QAAQ,CAAC,EAAE,SAAA9D,QAAc;AAClC,UAAA6D,EAAUvI,CAAG,EAAE,QAAQ,KAAK,GAAG0E,CAAO;AAAA,QAClD,CAAW;AAAA,MAEX;AAAA,IACA,CAAK,GAEMgB;AAAA,EACX;AAAA,EAEE,kBAAkBD,GAAO;AACvB,UAAMI,IAAWY,EAAehB,GAAO,KAAK,OAAO,GAC7C,EAAE,MAAA9H,GAAM,SAAAoC,EAAS,IAAG,KAAK,UACzB2F,IAAU,CAAE;AAGlB,WAAA3F,EAAQ,QAAQ,CAAC,EAAE,GAAGI,GAAM,GAAGH,QAAU;AACvC,UAAI,CAACjD,EAAUoD,CAAI;AACjB;AAGF,UAAIuE,IAAU,CAAE;AAGhB,MAAA/G,EAAK,QAAQ,CAACR,GAAKkD,MAAa;AAC9B,QAAAqE,EAAQ;AAAA,UACN,GAAG,KAAK,aAAa;AAAA,YACnB,KAAAvH;AAAA,YACA,OAAOgD,EAAKE,CAAQ;AAAA,YACpB,UAAAwF;AAAA,UACD,CAAA;AAAA,QACF;AAAA,MACT,CAAO,GAEGnB,EAAQ,UACVgB,EAAQ,KAAK;AAAA,QACX,KAAA1F;AAAA,QACA,MAAAG;AAAA,QACA,SAAAuE;AAAA,MACV,CAAS;AAAA,IAET,CAAK,GAEMgB;AAAA,EACX;AAAA,EACE,aAAa,EAAE,KAAAvI,GAAK,OAAAd,GAAO,UAAAwJ,EAAQ,GAAI;AACrC,QAAI,CAAC9I,EAAUV,CAAK;AAClB,aAAO,CAAA;AAGT,QAAIqI,IAAU,CAAE;AAEhB,QAAItI,EAAQC,CAAK;AACf,MAAAA,EAAM,QAAQ,CAAC,EAAE,GAAG4F,GAAM,GAAGjC,GAAK,GAAGV,QAAW;AAC9C,YAAI,CAACvC,EAAUkF,CAAI;AACjB;AAGF,cAAM,EAAE,SAAAqC,GAAS,OAAAzB,GAAO,SAAAlB,EAAS,IAAGkE,EAAS,SAAS5D,CAAI;AAE1D,QAAIqC,KACFI,EAAQ,KAAK;AAAA,UACX,OAAA7B;AAAA,UACA,KAAA1F;AAAA,UACA,OAAO8E;AAAA,UACP,KAAAjC;AAAA,UACA,MAAAV;AAAA,UACA,SAAAqC;AAAA,QACZ,CAAW;AAAA,MAEX,CAAO;AAAA,SACI;AACL,YAAM,EAAE,GAAGM,GAAM,GAAG3C,EAAM,IAAGjD,GAEvB,EAAE,SAAAiI,GAAS,OAAAzB,GAAO,SAAAlB,EAAS,IAAGkE,EAAS,SAAS5D,CAAI;AAE1D,MAAIqC,KACFI,EAAQ,KAAK,EAAE,OAAA7B,GAAO,KAAA1F,GAAK,OAAO8E,GAAM,MAAA3C,GAAM,SAAAqC,GAAS;AAAA,IAE/D;AAEI,WAAO+C;AAAA,EACX;AACA;AAEAoD,EAAK,UAAU;AACfA,EAAK,cAAcnH;AACnBmH,EAAK,aAAajH;AAClBiH,EAAK,SAAS1I;AAGZ0I,EAAK,aAAab;AAIlBV,GAASP,EAAc;AC1uDzB,MAAMyC,GAAY;AAAA,EACT;AAAA,EAER,cAAc;AACb,SAAK,OAAO,IAAIX,EAAK,IAAI;AAAA,MACxB,MAAM,CAAC,OAAO;AAAA,MACd,cAAc;AAAA,MACd,UAAU;AAAA,MACV,WAAW;AAAA,MACX,UAAU;AAAA,MACV,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,iBAAiB;AAAA,IAAA,CACjB;AAAA,EAAA;AAAA,EAGF,SAASY,GAA2B;AACnC,eAAWC,KAAQD;AACb,WAAA,KAAK,IAAI,EAAE,OAAOC,EAAK,YAAY,GAAG,UAAUA,GAAM;AAAA,EAC5D;AAAA,EAGD,YAAYD,GAA2B;AACtC,eAAWC,KAAQD;AAClB,WAAK,KAAK,OAAO,CAACE,MAAMA,EAAE,UAAUD,CAAI;AAAA,EACzC;AAAA,EAGD,MAAM1G,GAAc+F,IAAQ,IAAc;AAEzC,WADgB,KAAK,KAAK,OAAO/F,GAAM,EAAE,OAAA+F,GAAO,EACjC,IAAI,CAACxL,MAAWA,EAAO,KAAK,QAAQ;AAAA,EAAA;AAAA,EAGpD,cAAcqM,GAA4B;AACrC,QAAA;AACG,YAAA,EAAE,IAAA5K,GAAI,MAAAoI,EAAA,IAASwC;AAErB,cAAQxC,GAAM;AAAA,QACb,KAAK;AACJ,sBAAK,SAASwC,EAAQ,SAAS,CAAA,CAAE,GAC1B,EAAE,IAAA5K,GAAI,MAAM,YAAY,QAAQ,KAAK;AAAA,QAE7C,KAAK;AACJ,sBAAK,YAAY4K,EAAQ,SAAS,CAAA,CAAE,GAC7B,EAAE,IAAA5K,GAAI,MAAM,YAAY,QAAQ,KAAK;AAAA,QAE7C,KAAK,SAAS;AACb,gBAAMyH,IAAU,KAAK,MAAMmD,EAAQ,QAAQ,EAAE;AAC7C,iBAAO,EAAE,IAAA5K,GAAI,MAAM,YAAY,SAAAyH,EAAQ;AAAA,QAAA;AAAA,QAGxC;AACC,iBAAO,EAAE,IAAAzH,GAAI,MAAM,SAAS,SAAS,iBAAiBoI,CAAI,GAAG;AAAA,MAAA;AAAA,aAEvDyC,GAAO;AACR,aAAA;AAAA,QACN,IAAID,EAAQ;AAAA,QACZ,MAAM;AAAA,QACN,SAASC,aAAiB,QAAQA,EAAM,UAAU,OAAOA,CAAK;AAAA,MAC/D;AAAA,IAAA;AAAA,EACD;AAAA,EAGD,QAAc;AACP,UAAAC,IAAKC,GAAS,gBAAgB;AAAA,MACnC,OAAO,QAAQ;AAAA,MACf,QAAQ,QAAQ;AAAA,MAChB,UAAU;AAAA,IAAA,CACV;AAEE,IAAAD,EAAA,GAAG,QAAQ,CAACE,MAAS;AACnB,UAAA;AACG,cAAAJ,IAAU,KAAK,MAAMI,CAAI,GACzBC,IAAW,KAAK,cAAcL,CAAO;AAC3C,gBAAQ,IAAI,KAAK,UAAUK,CAAQ,CAAC;AAAA,eAC5BJ,GAAO;AACP,gBAAA;AAAA,UACP,KAAK,UAAU;AAAA,YACd,IAAI;AAAA,YACJ,MAAM;AAAA,YACN,SAAS,gBAAgBA,aAAiB,QAAQA,EAAM,UAAU,OAAOA,CAAK,CAAC;AAAA,UAC/E,CAAA;AAAA,QACF;AAAA,MAAA;AAAA,IACD,CACA,GAEEC,EAAA,GAAG,SAAS,MAAM;AACpB,cAAQ,KAAK,CAAC;AAAA,IAAA,CACd;AAAA,EAAA;AAEH;AAEA,MAAMI,KAAS,IAAIV,GAAY;AAC/BU,GAAO,MAAM;","x_google_ignoreList":[0]}