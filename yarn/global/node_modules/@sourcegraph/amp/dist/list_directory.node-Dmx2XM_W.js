#!/usr/bin/env node
import c from "node:fs/promises";
import u from "node:os";
import s from "node:path";
import { O as f, aU as i, aS as l, m, aP as p } from "./color-Bf2jGwiV.js";
const D = ({ args: r }, { dirs: t }) => {
  if (t.length === 0)
    return new f((e) => {
      e.next({
        status: "error",
        error: { message: "No directory provided" }
      }), e.complete();
    });
  const n = y(
    t.map((e) => e.fsPath),
    r.path
  );
  return i(n).pipe(
    l(
      (e) => i(
        c.readdir(e, { withFileTypes: !0 }).catch((o) => {
          throw new p(e);
        })
      )
    ),
    m((e) => {
      const o = e.map((a) => a.name + (a.isDirectory() ? "/" : ""));
      return {
        status: "done",
        files: o,
        result: o
      };
    })
  );
};
async function y(r, t) {
  if (!t)
    return r[0];
  if (t.startsWith("~") && (t = s.join(u.homedir(), t.slice(1))), s.isAbsolute(t))
    return t;
  for (const n of r) {
    const e = s.resolve(n, t);
    try {
      if ((await c.stat(e)).isDirectory())
        return e;
    } catch {
      continue;
    }
  }
  return s.resolve(r[0], t);
}
export {
  D as nodeListDirectoryTool,
  y as resolveArgumentDirectoryNode
};
//# sourceMappingURL=list_directory.node-Dmx2XM_W.js.map
