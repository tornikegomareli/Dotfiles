#!/usr/bin/env node
import { aV as c, g, m as p, b3 as l, b4 as f, b5 as m, aT as h, c as d, O as b } from "./color-Bf2jGwiV.js";
import { r as E } from "./executable-Cf6tmsfm.js";
const A = ({ args: a }, { dirs: t }) => {
  for (const e of t)
    c(e);
  return g(...t.map((e) => _(e, a))).pipe(
    p((e) => {
      const s = [];
      for (const r of e)
        r.status === "in-progress" ? s.push(...r?.progress ?? []) : r.status === "done" ? s.push(...r.result) : r.status === "cancelled" ? s.push(...r.progress ?? []) : r.status === "error" && s.push(...r.progress ?? []);
      const i = e.filter((r) => r.status === "error");
      return i.length > 0 ? {
        status: "error",
        progress: s,
        error: {
          message: i.map((r) => r?.error?.message ?? "").join(`
`)
        }
      } : {
        status: e.every((r) => r.status === "done") ? "done" : e.some((r) => r.status === "cancelled") ? "cancelled" : "in-progress",
        progress: s,
        result: s
      };
    })
  );
};
function _(a, t) {
  const e = [
    "--with-filename",
    "--line-number",
    "--no-heading",
    "--no-require-git",
    "--max-columns",
    l.toString(),
    "--trim",
    "--max-count",
    f.toString()
  ];
  return t.caseSensitive || e.push("-i"), e.push("--regexp", t.pattern), t.path && (m(t.path), e.push(t.path)), h(E(), e, {
    cwd: a.fsPath,
    stdio: ["ignore", "pipe", "pipe"]
  }).pipe(
    p(({ stdout: s, stderr: i, exitCode: o, exited: r }) => {
      const n = s.trim().split(`
`).filter((u) => u.length > 0);
      return r ? r && o && o >= 2 ? {
        status: "error",
        progress: n,
        error: { message: `ripgrep exited with code ${o}` }
      } : {
        status: "done",
        progress: n,
        result: n
      } : {
        status: "in-progress",
        progress: n
      };
    }),
    d(
      (s) => b.of({
        status: "error",
        progress: [],
        error: { message: String(s) }
      })
    )
  );
}
export {
  A as nodeGrepTool
};
//# sourceMappingURL=node-C1YHImbI.js.map
